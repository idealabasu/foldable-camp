{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quick Overview Daily Schedule: The camp will run 1-3:30pm Monday thru Friday June 20-25, 2022 in Peralta Hall, Room 103 on the ASU Polytechnic Campus. We will hold a student showcase from 2:30-3:30pm on Friday, June 17 .","title":"Foldable Robotics Camp"},{"location":"#quick-overview","text":"Daily Schedule: The camp will run 1-3:30pm Monday thru Friday June 20-25, 2022 in Peralta Hall, Room 103 on the ASU Polytechnic Campus. We will hold a student showcase from 2:30-3:30pm on Friday, June 17 .","title":"Quick Overview"},{"location":"day-camp-general-info/","text":"Contents Overview Check-in/Check-out Evaluation & Permission Form Food/Water/Snacks Daily Checklist Laptops and Software Instructor Information Locations Quick Overview Daily Schedule: The camp will run 9am-4pm, Monday thru Friday June 13-17, 2022 in Peralta Hall, Room 103 on the ASU Polytechnic Campus. We will hold a student showcase from 3-4pm on Friday, June 17 . Please review the parking information below if you plan to stop by. (UPDATED) Check-in / Check-Out Check-in is 9:00am to 9:15am M-F. Doors open at 9am. Check-out is 3:45pm-4:00pm M-F. Doors close at 4pm. We will station one of our teaching team out in Lot 30 near the 20-minute parking spots for parent check-in. If you don't see anyone please proceed to the classroom to check your student in there. It is highly encouraged that you drop your student off each day rather than have them drive and pay for parking, as it is the most economical option (Parking information below ). Lot 30 is the closest and easiest dropoff location. There are 2 free 20-minute pickup/dropoff spots located here . We ask that you bring an ID each day, as our check-in/check-out procedure requires that we release students to an approved individual. We will be emailing a request for you to fill out a check-in/check-out preference form to indicate if you would prefer to have your child drive or if you would like to add other responsible adults who have your permission to check your student in and out. Please remember to bring your ID. If your student is driving themself, they should bring their driver's license or school ID. (NEW) Evaluation & Permission Form We would like to run a survey on Friday at the conclusion of the course. More information below. Parents: please fill out this permission form Students: please fill out this permission form . Participants in the course will be asked to participate in an evaluation of their experiences and perceptions. This is voluntary and all parents and students will be provided additional information at the time of enrollment to consent to participating in an end of the program survey. In order to continually improve the experiences of participating students, students will be provided a ten-minute survey at the completion of the course. The data will only be used if both parents and child consent to data collection; your child\u2019s status in the program is not impacted by the decision to complete the survey. The program is partnering with the College Research and Evaluation Services Team (CREST) at ASU provide external evaluation support to grants and will never share participant identifiers with program faculty or staff. Responses will be aggregated and reported in summary form for program improvement and possibly presentations or publications, but no identifying information will ever be shared. We appreciate your consideration to participate in this evaluation endeavor. (UPDATED) Food, Water, Snacks It is highly encouraged that students bring their lunch as it is the most economical option, but food is available for purchase on campus. There are no easily accessible fridges nearby to the classroom, so please remember to bring an ice-pack to keep lunches fresh through the morning. (Updated) Available Food Options: Subway Starbucks Polytechnic Marketplace (convenience store) Students should bring their own snacks and a personal water bottle. Daily Checklist Each Day Backpack Close-Toed Shoes Lunch or Lunch Money Phone / Camera (for data collection) Laptop (recommended; see below for more info) Water Bottle Personal Snacks Notebook & Pen Driver's License or official ID (for check-in and check-out) First Day Signed Permission Forms (if you did not yet complete it) Pickup / Dropoff Form (if you did not yet complete it) Emergency Contact Info (if you did not yet complete it) Adult driver's license (for adult check-in and check-out) or Student driver's license (for student check-in and check-out) Last Day Take your kits home! (NEW) Laptops and Software We encourage students to bring their own laptop. We are able to support the following operating systems*: Windows Mac Linux *Unfortunately, chromebooks do not currently support the software and hardware we plan to use. If you are bringing a laptop, please ensure your student has the proper user permissions for installing new software on the laptop. Otherwise, please go ahead and install the following software in advance: Miniconda Silabs cp210x driver Tracker CreateSpace There are also a number of PCs in the classroom that will be available. (UPDATED) Instructor Information Dan Aukes Dan Aukes is an Assistant Professor at Arizona State University at the Polytechnic Campus. He runs the IDEAlab where his research focuses on the design of robots using everyday, uncommon, and new materials. Contact info: In case there is a logistical problem with regard to student dropoff/pickup or other immediate need, please contact Dr. Aukes at: email: danaukes@asu.edu mobile: 650-353-1241 Max Colfer Max is a 7-12th grade STEM teacher at ASU Preparatory Polytechnic Academy. He is passionate about science and the student experience, and is looking forward to helping students apply the knowledge they achieve in creative and innovative ways. Alexis Mason Alexis Mason is currently a Technology Integration Educator with Gilbert Public Schools. She spent the first 17 years of her career teaching as an elementary classroom teacher, secondary science teacher, and secondary STEM elective teacher. (UPDATED) Locations Camp Classroom Peralta Hall Room 103 7171 E Sonoran Arroyo Mall Mesa, AZ 85212 Polytechnic Student Union 5999 S Backus Mall Mesa, AZ 85212 Parking Parking is strictly enforced at ASU; you must have a permit to park in most ASU lots. If your student is driving themselves, they should park in metered parking. This is available in lot 29 (closer) or lot 10 (overflow location). $12/day Credit card required at kiosk, or use the ParkMobile App (pre-install the app on your student's phone and connect a payment option in advance)","title":"Foldable Robotics General Information"},{"location":"day-camp-general-info/#contents","text":"Overview Check-in/Check-out Evaluation & Permission Form Food/Water/Snacks Daily Checklist Laptops and Software Instructor Information Locations","title":"Contents"},{"location":"day-camp-general-info/#quick-overview","text":"Daily Schedule: The camp will run 9am-4pm, Monday thru Friday June 13-17, 2022 in Peralta Hall, Room 103 on the ASU Polytechnic Campus. We will hold a student showcase from 3-4pm on Friday, June 17 . Please review the parking information below if you plan to stop by.","title":"Quick Overview"},{"location":"day-camp-general-info/#updated-check-in-check-out","text":"Check-in is 9:00am to 9:15am M-F. Doors open at 9am. Check-out is 3:45pm-4:00pm M-F. Doors close at 4pm. We will station one of our teaching team out in Lot 30 near the 20-minute parking spots for parent check-in. If you don't see anyone please proceed to the classroom to check your student in there. It is highly encouraged that you drop your student off each day rather than have them drive and pay for parking, as it is the most economical option (Parking information below ). Lot 30 is the closest and easiest dropoff location. There are 2 free 20-minute pickup/dropoff spots located here . We ask that you bring an ID each day, as our check-in/check-out procedure requires that we release students to an approved individual. We will be emailing a request for you to fill out a check-in/check-out preference form to indicate if you would prefer to have your child drive or if you would like to add other responsible adults who have your permission to check your student in and out. Please remember to bring your ID. If your student is driving themself, they should bring their driver's license or school ID.","title":"(UPDATED) Check-in / Check-Out"},{"location":"day-camp-general-info/#new-evaluation-permission-form","text":"We would like to run a survey on Friday at the conclusion of the course. More information below. Parents: please fill out this permission form Students: please fill out this permission form . Participants in the course will be asked to participate in an evaluation of their experiences and perceptions. This is voluntary and all parents and students will be provided additional information at the time of enrollment to consent to participating in an end of the program survey. In order to continually improve the experiences of participating students, students will be provided a ten-minute survey at the completion of the course. The data will only be used if both parents and child consent to data collection; your child\u2019s status in the program is not impacted by the decision to complete the survey. The program is partnering with the College Research and Evaluation Services Team (CREST) at ASU provide external evaluation support to grants and will never share participant identifiers with program faculty or staff. Responses will be aggregated and reported in summary form for program improvement and possibly presentations or publications, but no identifying information will ever be shared. We appreciate your consideration to participate in this evaluation endeavor.","title":"(NEW) Evaluation &amp; Permission Form"},{"location":"day-camp-general-info/#updated-food-water-snacks","text":"It is highly encouraged that students bring their lunch as it is the most economical option, but food is available for purchase on campus. There are no easily accessible fridges nearby to the classroom, so please remember to bring an ice-pack to keep lunches fresh through the morning. (Updated) Available Food Options: Subway Starbucks Polytechnic Marketplace (convenience store) Students should bring their own snacks and a personal water bottle.","title":"(UPDATED) Food, Water, Snacks"},{"location":"day-camp-general-info/#daily-checklist","text":"","title":"Daily Checklist"},{"location":"day-camp-general-info/#each-day","text":"Backpack Close-Toed Shoes Lunch or Lunch Money Phone / Camera (for data collection) Laptop (recommended; see below for more info) Water Bottle Personal Snacks Notebook & Pen Driver's License or official ID (for check-in and check-out)","title":"Each Day"},{"location":"day-camp-general-info/#first-day","text":"Signed Permission Forms (if you did not yet complete it) Pickup / Dropoff Form (if you did not yet complete it) Emergency Contact Info (if you did not yet complete it) Adult driver's license (for adult check-in and check-out) or Student driver's license (for student check-in and check-out)","title":"First Day"},{"location":"day-camp-general-info/#last-day","text":"Take your kits home!","title":"Last Day"},{"location":"day-camp-general-info/#new-laptops-and-software","text":"We encourage students to bring their own laptop. We are able to support the following operating systems*: Windows Mac Linux *Unfortunately, chromebooks do not currently support the software and hardware we plan to use. If you are bringing a laptop, please ensure your student has the proper user permissions for installing new software on the laptop. Otherwise, please go ahead and install the following software in advance: Miniconda Silabs cp210x driver Tracker CreateSpace There are also a number of PCs in the classroom that will be available.","title":"(NEW) Laptops and Software"},{"location":"day-camp-general-info/#updated-instructor-information","text":"","title":"(UPDATED) Instructor Information"},{"location":"day-camp-general-info/#dan-aukes","text":"Dan Aukes is an Assistant Professor at Arizona State University at the Polytechnic Campus. He runs the IDEAlab where his research focuses on the design of robots using everyday, uncommon, and new materials. Contact info: In case there is a logistical problem with regard to student dropoff/pickup or other immediate need, please contact Dr. Aukes at: email: danaukes@asu.edu mobile: 650-353-1241","title":"Dan Aukes"},{"location":"day-camp-general-info/#max-colfer","text":"Max is a 7-12th grade STEM teacher at ASU Preparatory Polytechnic Academy. He is passionate about science and the student experience, and is looking forward to helping students apply the knowledge they achieve in creative and innovative ways.","title":"Max Colfer"},{"location":"day-camp-general-info/#alexis-mason","text":"Alexis Mason is currently a Technology Integration Educator with Gilbert Public Schools. She spent the first 17 years of her career teaching as an elementary classroom teacher, secondary science teacher, and secondary STEM elective teacher.","title":"Alexis Mason"},{"location":"day-camp-general-info/#updated-locations","text":"","title":"(UPDATED) Locations"},{"location":"day-camp-general-info/#camp-classroom","text":"Peralta Hall Room 103 7171 E Sonoran Arroyo Mall Mesa, AZ 85212","title":"Camp Classroom"},{"location":"day-camp-general-info/#polytechnic-student-union","text":"5999 S Backus Mall Mesa, AZ 85212","title":"Polytechnic Student Union"},{"location":"day-camp-general-info/#parking","text":"Parking is strictly enforced at ASU; you must have a permit to park in most ASU lots. If your student is driving themselves, they should park in metered parking. This is available in lot 29 (closer) or lot 10 (overflow location). $12/day Credit card required at kiosk, or use the ParkMobile App (pre-install the app on your student's phone and connect a payment option in advance)","title":"Parking"},{"location":"day-camp-schedule/","text":"This Page Daily Schedule Weeklong Lesson Plan Daily Schedule Time* Description Location 9:00 Doors Open Peralta 103 9:00-9:15 Check-in Peralta 103 9:15 Morning Session Peralta 103 9:15 Topic 1 Peralta 103 10:30 Bio Break Peralta 10:35 Topic 2 Peralta 103 11:45 Lab Journal Peralta 103 12:00 Lunch Break Citrus Cafe / Student Union 1:00 Afternoon Session Peralta 103 1:00 Topic 3 Peralta 103 2:15 Bio Break Peralta 2:20 Topic 4 Peralta 103 3:30 Lab Journal Peralta 103 3:40 Vote for Shwag Peralta 103 3:45 Cleanup Peralta 103 3:45-4:00 Check-out Peralta 103 4:00 Doors Close Peralta 103 * All times approximate Weeklong Lesson Plan Monday, June 13 Topic 1: Origami & Folding Topic 2: Making Session Topic 3: Biomechanics and Bioinspiration Topic 4: Making Session Tasks Establish Teams Create github account and website Build & label kit boxes Tuesday, June 14 Topic 1: ESP32 Topic 2: Python Topic 3: Servos Topic 4: Body Module Prototyping Tasks Install Anaconda, Thonny Wednesday, June 15 Topic 1: Vinyl Cutters & Manufacturing Topic 2: Designing, Programming and Making Session Topic 3: Physics and Modeling Topic 4: Experimentation Thursday, June 16 Topic 1: Leg Re-Design Topic 2: Subsystem Prototyping Topic 3: Circuits & Sensors Topic 4: Advanced Control w/ ESP32 Tasks Lab Tour (tentative) Friday, June 17 Topic 1: Final Build Session Topic 2: Final Assembly Session Topic 3: Internal Student Presentations Topic 4: Parent Showcase(3:00-4:00)","title":"Schedule"},{"location":"day-camp-schedule/#daily-schedule","text":"Time* Description Location 9:00 Doors Open Peralta 103 9:00-9:15 Check-in Peralta 103 9:15 Morning Session Peralta 103 9:15 Topic 1 Peralta 103 10:30 Bio Break Peralta 10:35 Topic 2 Peralta 103 11:45 Lab Journal Peralta 103 12:00 Lunch Break Citrus Cafe / Student Union 1:00 Afternoon Session Peralta 103 1:00 Topic 3 Peralta 103 2:15 Bio Break Peralta 2:20 Topic 4 Peralta 103 3:30 Lab Journal Peralta 103 3:40 Vote for Shwag Peralta 103 3:45 Cleanup Peralta 103 3:45-4:00 Check-out Peralta 103 4:00 Doors Close Peralta 103 * All times approximate","title":"Daily Schedule"},{"location":"day-camp-schedule/#weeklong-lesson-plan","text":"","title":"Weeklong Lesson Plan"},{"location":"day-camp-schedule/#monday-june-13","text":"Topic 1: Origami & Folding Topic 2: Making Session Topic 3: Biomechanics and Bioinspiration Topic 4: Making Session","title":"Monday, June 13"},{"location":"day-camp-schedule/#tasks","text":"Establish Teams Create github account and website Build & label kit boxes","title":"Tasks"},{"location":"day-camp-schedule/#tuesday-june-14","text":"Topic 1: ESP32 Topic 2: Python Topic 3: Servos Topic 4: Body Module Prototyping","title":"Tuesday, June 14"},{"location":"day-camp-schedule/#tasks_1","text":"Install Anaconda, Thonny","title":"Tasks"},{"location":"day-camp-schedule/#wednesday-june-15","text":"Topic 1: Vinyl Cutters & Manufacturing Topic 2: Designing, Programming and Making Session Topic 3: Physics and Modeling Topic 4: Experimentation","title":"Wednesday, June 15"},{"location":"day-camp-schedule/#thursday-june-16","text":"Topic 1: Leg Re-Design Topic 2: Subsystem Prototyping Topic 3: Circuits & Sensors Topic 4: Advanced Control w/ ESP32","title":"Thursday, June 16"},{"location":"day-camp-schedule/#tasks_2","text":"Lab Tour (tentative)","title":"Tasks"},{"location":"day-camp-schedule/#friday-june-17","text":"Topic 1: Final Build Session Topic 2: Final Assembly Session Topic 3: Internal Student Presentations Topic 4: Parent Showcase(3:00-4:00)","title":"Friday, June 17"},{"location":"esp32/","text":"title: ESP32 Documentation type: starred icon: bi bi-folder weight: 60","title":"Index"},{"location":"esp32/installing-anaconda-python/","tags":["python","programming"],"text":"Introduction This tutorial is for installing the anaconda python distribution on windows. Windows Installation These installation instructions are for computers that do not have Python or Anaconda installed already. Python and Anaconda do not come installed by default on most computers so if you haven't installed them intentionally, these instructions likely apply to you. If you do have another version of Python installed, then please ask Dr. Aukes for further details. Anaconda Instructions Note: These instructions are for the smaller \"Miniconda\" distribution, that includes only the conda package manager that you can use to install only the packages that you want. You can also install the full Anaconda distribution, and follow the same basic instructions. Download and install miniconda ( win64 quick link ) with the following options: Install for \"All Users (requires admin privileges)\" to the default directory (e.g., C:\\ProgramData\\Miniconda3 ) Check the \"Add Miniconda3 to the system PATH environment variable\" box Check the \"Register Miniconda3 as the system Python 3.9\" box Install additional software packages a. In Windows, go to the search bar and type \"cmd\". Once you see the Command Prompt app in the list, right click on it and choose \"Run as administrator\" from the contextual menu. b. Paste each of the following lines (one at a time) at the command prompt and press enter: conda update --all","title":"Miniconda/Anaconda (Python) Installation Tutorial"},{"location":"esp32/installing-anaconda-python/#introduction","text":"This tutorial is for installing the anaconda python distribution on windows.","title":"Introduction"},{"location":"esp32/installing-anaconda-python/#windows-installation","text":"These installation instructions are for computers that do not have Python or Anaconda installed already. Python and Anaconda do not come installed by default on most computers so if you haven't installed them intentionally, these instructions likely apply to you. If you do have another version of Python installed, then please ask Dr. Aukes for further details.","title":"Windows Installation"},{"location":"esp32/installing-anaconda-python/#anaconda-instructions","text":"Note: These instructions are for the smaller \"Miniconda\" distribution, that includes only the conda package manager that you can use to install only the packages that you want. You can also install the full Anaconda distribution, and follow the same basic instructions. Download and install miniconda ( win64 quick link ) with the following options: Install for \"All Users (requires admin privileges)\" to the default directory (e.g., C:\\ProgramData\\Miniconda3 ) Check the \"Add Miniconda3 to the system PATH environment variable\" box Check the \"Register Miniconda3 as the system Python 3.9\" box Install additional software packages a. In Windows, go to the search bar and type \"cmd\". Once you see the Command Prompt app in the list, right click on it and choose \"Run as administrator\" from the contextual menu. b. Paste each of the following lines (one at a time) at the command prompt and press enter: conda update --all","title":"Anaconda Instructions"},{"location":"esp32/esp32-installation-and-setup/","tags":["esp32","python","micropython","thonny"],"text":"Install Miniconda and packages You need to use Python on your PC to program the ESP32. install miniconda ( win64 quick link ). Follow this tutorial for detailed instructions. Installing Thonny and other Packages: Open up powershell (win+x, i) and type conda install -c conda-forge wrapt type pip install esptool thonny Note: on Mac, open up terminal or xterm and type pip3 install esptool thonny Install Device Drivers The device drivers will help your computer recognize the ESP32 as a USB Device Install Silabs cp210x driver ( windows download ) This step is required if the device is not recognized as a virtual COM port. Flashing the ESP32 Firmware for MicroPython download firmware (I don't recommend v1.18, use the nightly build as it contains several more recent fixes to PWM) open cmd and type thonny open up tools-->options, select the \"interpreter\" tab and ensure that \"Micropython (ESP32)\" is selected. Select the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" down below. Before selecting ok, in the bottom right hand corner select \"install or update firmware\". select the right port corresponding to the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" select the firmware you downloaded, (e.g. \"esp32-20220117-v1.18.bin\") and hit \"install\". wait for the install to finish Look at the interpreter window. You should see: ``` MicroPython v1.18 on 2022-01-17; ESP32 module with ESP32 Type \"help()\" for more information. ``` type print('hello, world!') into the shell and that's it! You should have a working python interpreter loaded on your ESP32! Mac Specific Suggestions: use terminal or xterm if you have it as Macs do not have powershell use pip3 install ... instead of pip install ... with the most recent flavors of MacOS make sure pip or pip3 (Mac) is updated to avoid installation errors bash python3 -m pip install --upgrade pip Mac doesn't do COM, but can list USB devices. In your terminal, type: bash ls -al /dev/tty. then unplug your ESP32 and run the previous command again to see which name for the device is the ESP32 when selecting the port, there may be two Silicon Labs CP210X USB to UART Bridge (ESP device name here) devices. Watch the messages in the terminal to determine the correct selection (obviously, don't use the one that says error/cannot find/etc.) when running the program you may need to press ctrl + c twice within thonny Issues If you install on a computer where you don't have administrative access, it is still possible to install but you have to remember a couple things: After instlling anaconda, you must add it to your path every time you want to run it. Start --> \"cmd\" set PATH=C:\\Users\\<MYUSERNAME>\\Miniconda3;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\mingw-w64\\bin;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\usr\\bin;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\bin;C:\\Users\\daukes\\Miniconda3\\Scripts;%PATH% Replace with your username; confirm the path exists. This step is required every time you load thonny if you installed \"just for me\" or are on an administratively locked pc.","title":"ESP32 Installation and Setup"},{"location":"esp32/esp32-installation-and-setup/#install-miniconda-and-packages","text":"You need to use Python on your PC to program the ESP32. install miniconda ( win64 quick link ). Follow this tutorial for detailed instructions. Installing Thonny and other Packages: Open up powershell (win+x, i) and type conda install -c conda-forge wrapt type pip install esptool thonny Note: on Mac, open up terminal or xterm and type pip3 install esptool thonny","title":"Install Miniconda and packages"},{"location":"esp32/esp32-installation-and-setup/#install-device-drivers","text":"The device drivers will help your computer recognize the ESP32 as a USB Device Install Silabs cp210x driver ( windows download ) This step is required if the device is not recognized as a virtual COM port.","title":"Install Device Drivers"},{"location":"esp32/esp32-installation-and-setup/#flashing-the-esp32-firmware-for-micropython","text":"download firmware (I don't recommend v1.18, use the nightly build as it contains several more recent fixes to PWM) open cmd and type thonny open up tools-->options, select the \"interpreter\" tab and ensure that \"Micropython (ESP32)\" is selected. Select the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" down below. Before selecting ok, in the bottom right hand corner select \"install or update firmware\". select the right port corresponding to the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" select the firmware you downloaded, (e.g. \"esp32-20220117-v1.18.bin\") and hit \"install\". wait for the install to finish Look at the interpreter window. You should see: ``` MicroPython v1.18 on 2022-01-17; ESP32 module with ESP32 Type \"help()\" for more information. ``` type print('hello, world!') into the shell and that's it! You should have a working python interpreter loaded on your ESP32!","title":"Flashing the ESP32 Firmware for MicroPython"},{"location":"esp32/esp32-installation-and-setup/#mac-specific-suggestions","text":"use terminal or xterm if you have it as Macs do not have powershell use pip3 install ... instead of pip install ... with the most recent flavors of MacOS make sure pip or pip3 (Mac) is updated to avoid installation errors bash python3 -m pip install --upgrade pip Mac doesn't do COM, but can list USB devices. In your terminal, type: bash ls -al /dev/tty. then unplug your ESP32 and run the previous command again to see which name for the device is the ESP32 when selecting the port, there may be two Silicon Labs CP210X USB to UART Bridge (ESP device name here) devices. Watch the messages in the terminal to determine the correct selection (obviously, don't use the one that says error/cannot find/etc.) when running the program you may need to press ctrl + c twice within thonny","title":"Mac Specific Suggestions:"},{"location":"esp32/esp32-installation-and-setup/#issues","text":"If you install on a computer where you don't have administrative access, it is still possible to install but you have to remember a couple things: After instlling anaconda, you must add it to your path every time you want to run it. Start --> \"cmd\" set PATH=C:\\Users\\<MYUSERNAME>\\Miniconda3;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\mingw-w64\\bin;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\usr\\bin;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\bin;C:\\Users\\daukes\\Miniconda3\\Scripts;%PATH% Replace with your username; confirm the path exists. This step is required every time you load thonny if you installed \"just for me\" or are on an administratively locked pc.","title":"Issues"},{"location":"esp32/overview-of-the-esp32-devkit-doit-v1/","tags":["esp32","python","micropython"],"text":"TL/DR RX0 / TX0 are used by the onboard silabs USB/serial chip and shouldn't be used for UART in your project Pinouts / Schematics Espressif ESP32-WROOM-32 Datasheet ESP32-Devkit-C Page Devkit Technical Documents External Pinout Resources https://johnmu.com/picking-esp32-dev-board/ https://www.etechnophiles.com/esp32-dev-board-pinout-specifications-datasheet-and-schematic/ https://www.studiopieters.nl/esp32-pinout/ MicroPython MicroPython for ESP32 firmware download page ESP32 Micropython Documentation quickref Asynchronous micropython-based MQTT repository","title":"Overview of the ESP32 DevKit DOIT V1"},{"location":"esp32/overview-of-the-esp32-devkit-doit-v1/#tldr","text":"RX0 / TX0 are used by the onboard silabs USB/serial chip and shouldn't be used for UART in your project","title":"TL/DR"},{"location":"esp32/overview-of-the-esp32-devkit-doit-v1/#pinouts-schematics","text":"","title":"Pinouts / Schematics"},{"location":"esp32/overview-of-the-esp32-devkit-doit-v1/#espressif","text":"ESP32-WROOM-32 Datasheet ESP32-Devkit-C Page Devkit Technical Documents","title":"Espressif"},{"location":"esp32/overview-of-the-esp32-devkit-doit-v1/#external-pinout-resources","text":"https://johnmu.com/picking-esp32-dev-board/ https://www.etechnophiles.com/esp32-dev-board-pinout-specifications-datasheet-and-schematic/ https://www.studiopieters.nl/esp32-pinout/","title":"External Pinout Resources"},{"location":"esp32/overview-of-the-esp32-devkit-doit-v1/#micropython","text":"MicroPython for ESP32 firmware download page ESP32 Micropython Documentation quickref Asynchronous micropython-based MQTT repository","title":"MicroPython"},{"location":"esp32/working-with-thonny/","tags":["esp32","python","micropython","thonny"],"text":"Menu & Icons File File --> Open(ctrl+o): If the ESP32 is connected it permits you to open a file either on your computer or from the ESP32's file space. File --> Save(ctrl+s): Saves the file to the current destination File --> Save As(ctrl+shift+s): Permits you to save the file to a new destination, as well as to switch between saving to PC or ESP32 Run Run --> Run current script(f5): This runs whatever code is in your current window. If the file is not saved, it will ask where to save it, but the code is executed through the shell rather than through the normal startup execution of the ESP32. You can save your code to your computer and run it on the ESP32 just by hitting f5, but then this means that once restarted, the ESP32 will not be able to run the code without running it again through Thonny. Run --> Stop/Restart Backend: This will attempt to restart the shell, if for example you want to put the ESP32 in \"interactive\" mode after it was restarted and began to run its internal boot.py --> main.py sequence. Shell / Python Interpreter The shell is at the bottom, and permits you to interact directly with the ESP32. Type in a python command and it will run it and (usually) return a value. For example: MicroPython v1.18 on 2022-01-17; ESP32 module with ESP32 Type \"help()\" for more information. >>> a=1 >>> a 1 >>> Shortcuts Ctrl+C: This stops (interrupts) execution of your code, wherever it is. Python throws an exception and indicates where it was stopped. Files Files in python are called \"modules\". To load a module you should use the import statement. The ESP32, however, also handles specific files as special cases: boot.py: If this file is present on the ESP32, it will be the first code to run after a hard reset main.py: If this file is present, it will be the second script that gets run automatically after a hard reset. It only runs once, so you have to implement a ``while``` loop if you want code to continue running. any other file: You must import that file in either boot.py or main.py if you want it to be loaded and run. For example, if you have a file called \"my_program.py\", and want it to be run from \"main.py\", open up \"main.py\" and add import my_program This will load and run the my_program.py module at that specific point in the code. upip Micropython has the capability to download and use packages from the internet. the upip module is responsible for this, and you can use it to download and install a number of useful external libraries. For example, assuming you have a working wifi connection established, you can type in the following to the shell >>> import upip >>> upip.install('micropython-logging') This has the effect of downloading the \"micropython-logging\" package from the pypi python repository to the \"/lib/\" folder. Not all pypi packages are compatible with micropython, and will throw an error if you attempt to install them. ESP32 Reset Button (EN): Use this button to restart the ESP32 Bootloader Button (Boot): This doesn't seem to be necessary to program or work with micropython. It is most likely used for programming with other tools/languages/IDE's to initiate \"bootloader mode\".","title":"Working with Thonny"},{"location":"esp32/working-with-thonny/#menu-icons","text":"","title":"Menu &amp; Icons"},{"location":"esp32/working-with-thonny/#file","text":"File --> Open(ctrl+o): If the ESP32 is connected it permits you to open a file either on your computer or from the ESP32's file space. File --> Save(ctrl+s): Saves the file to the current destination File --> Save As(ctrl+shift+s): Permits you to save the file to a new destination, as well as to switch between saving to PC or ESP32","title":"File"},{"location":"esp32/working-with-thonny/#run","text":"Run --> Run current script(f5): This runs whatever code is in your current window. If the file is not saved, it will ask where to save it, but the code is executed through the shell rather than through the normal startup execution of the ESP32. You can save your code to your computer and run it on the ESP32 just by hitting f5, but then this means that once restarted, the ESP32 will not be able to run the code without running it again through Thonny. Run --> Stop/Restart Backend: This will attempt to restart the shell, if for example you want to put the ESP32 in \"interactive\" mode after it was restarted and began to run its internal boot.py --> main.py sequence.","title":"Run"},{"location":"esp32/working-with-thonny/#shell-python-interpreter","text":"The shell is at the bottom, and permits you to interact directly with the ESP32. Type in a python command and it will run it and (usually) return a value. For example: MicroPython v1.18 on 2022-01-17; ESP32 module with ESP32 Type \"help()\" for more information. >>> a=1 >>> a 1 >>>","title":"Shell / Python Interpreter"},{"location":"esp32/working-with-thonny/#shortcuts","text":"Ctrl+C: This stops (interrupts) execution of your code, wherever it is. Python throws an exception and indicates where it was stopped.","title":"Shortcuts"},{"location":"esp32/working-with-thonny/#files","text":"Files in python are called \"modules\". To load a module you should use the import statement. The ESP32, however, also handles specific files as special cases: boot.py: If this file is present on the ESP32, it will be the first code to run after a hard reset main.py: If this file is present, it will be the second script that gets run automatically after a hard reset. It only runs once, so you have to implement a ``while``` loop if you want code to continue running. any other file: You must import that file in either boot.py or main.py if you want it to be loaded and run. For example, if you have a file called \"my_program.py\", and want it to be run from \"main.py\", open up \"main.py\" and add import my_program This will load and run the my_program.py module at that specific point in the code.","title":"Files"},{"location":"esp32/working-with-thonny/#upip","text":"Micropython has the capability to download and use packages from the internet. the upip module is responsible for this, and you can use it to download and install a number of useful external libraries. For example, assuming you have a working wifi connection established, you can type in the following to the shell >>> import upip >>> upip.install('micropython-logging') This has the effect of downloading the \"micropython-logging\" package from the pypi python repository to the \"/lib/\" folder. Not all pypi packages are compatible with micropython, and will throw an error if you attempt to install them.","title":"upip"},{"location":"esp32/working-with-thonny/#esp32","text":"Reset Button (EN): Use this button to restart the ESP32 Bootloader Button (Boot): This doesn't seem to be necessary to program or work with micropython. It is most likely used for programming with other tools/languages/IDE's to initiate \"bootloader mode\".","title":"ESP32"},{"location":"logistics/","text":"title: Camp Logistics type: starred icon: bi bi-folder weight: 60","title":"Index"},{"location":"logistics/daily-checklist/","text":"Close-Toed Shoes Backpack Phone / Camera (for data collection) Laptop (recommended; see below for more info) Personal Snacks Personal Water Bottle Notebook & Pen","title":"Daily Checklist"},{"location":"logistics/evaluation-and-data-collection/","text":"We would like to run a survey on Friday at the conclusion of the course. More information below. Parents and Students Should have signed and filled out a permission form upon registration. Please let me know if not. Participants in the course will be asked to participate in an evaluation of their experiences and perceptions. This is voluntary and all parents and students will be provided additional information at the time of enrollment to consent to participating in an end of the program survey. In order to continually improve the experiences of participating students, students will be provided a ten-minute survey at the completion of the course. The data will only be used if both parents and child consent to data collection; your child\u2019s status in the program is not impacted by the decision to complete the survey. The program is partnering with the College Research and Evaluation Services Team (CREST) at ASU provide external evaluation support to grants and will never share participant identifiers with program faculty or staff. Responses will be aggregated and reported in summary form for program improvement and possibly presentations or publications, but no identifying information will ever be shared. We appreciate your consideration to participate in this evaluation endeavor.","title":"Evaluation and Permission Form"},{"location":"logistics/half-day-schedule/","text":"Weeklong Lesson Plan Monday Origami & Folding Biomechanics and Bioinspiration Making Session Form Teams Tuesday Install Anaconda Python (on personal laptops) ESP32: Flash firmware and \"hello world\" Program Servos Wednesday Making Day Optional Sessions Analog Sensors Vinyl Cutter Thursday Tour: IDEAlab Innovation Hub Peralta Lab Optional Sessions Web Server Time-based Control Friday Final Build Session Internal Team Presentations Showcase","title":"Schedule"},{"location":"logistics/half-day-schedule/#weeklong-lesson-plan","text":"","title":"Weeklong Lesson Plan"},{"location":"logistics/half-day-schedule/#monday","text":"Origami & Folding Biomechanics and Bioinspiration Making Session Form Teams","title":"Monday"},{"location":"logistics/half-day-schedule/#tuesday","text":"Install Anaconda Python (on personal laptops) ESP32: Flash firmware and \"hello world\" Program Servos","title":"Tuesday"},{"location":"logistics/half-day-schedule/#wednesday","text":"Making Day","title":"Wednesday"},{"location":"logistics/half-day-schedule/#optional-sessions","text":"Analog Sensors Vinyl Cutter","title":"Optional Sessions"},{"location":"logistics/half-day-schedule/#thursday","text":"Tour: IDEAlab Innovation Hub Peralta Lab","title":"Thursday"},{"location":"logistics/half-day-schedule/#optional-sessions_1","text":"Web Server Time-based Control","title":"Optional Sessions"},{"location":"logistics/half-day-schedule/#friday","text":"Final Build Session Internal Team Presentations Showcase","title":"Friday"},{"location":"logistics/instructor-information/","text":"Dan Aukes Dan Aukes is an Assistant Professor at Arizona State University at the Polytechnic Campus. He runs the IDEAlab where his research focuses on the design of robots using everyday, uncommon, and new materials. Contact info: In case there is an immediate need, please contact Dr. Aukes at: email: danaukes@asu.edu mobile: 650-353-1241","title":"Instructor Information"},{"location":"logistics/instructor-information/#dan-aukes","text":"Dan Aukes is an Assistant Professor at Arizona State University at the Polytechnic Campus. He runs the IDEAlab where his research focuses on the design of robots using everyday, uncommon, and new materials. Contact info: In case there is an immediate need, please contact Dr. Aukes at: email: danaukes@asu.edu mobile: 650-353-1241","title":"Dan Aukes"},{"location":"logistics/laptops-and-software/","text":"We encourage students to bring their own laptop. We are able to support the following operating systems*: Windows Mac Linux *Unfortunately, chromebooks do not currently support the software and hardware we plan to use. If you are bringing a laptop, please ensure your student has the proper user permissions for installing new software on the laptop. Otherwise, please go ahead and install the following software in advance: Miniconda Silabs cp210x driver Tracker CreateSpace There are also a number of PCs in the classroom that will be available.","title":"Laptops and Software"},{"location":"presentations/","text":"title: Presentations published: false","title":"Index"},{"location":"presentations/biomechanics-and-bioinspiration/","text":"After Lunch Plan Origami Wrapup - More Mechanisms Biomechanics & Bioinspiration continue identifying important keywords and putting them in padlet Look up an animal look up keywords in google scholar Make a 1-slide presentation / proposal what motion do you want to find a video of it moving what information did you find on it? What\u2019s your idea for how to make it \u201cfoldable\u201d? Form Teams Make a body module. Bio-Inspiration Robotic Systems help us understand the biological world Can mimic biological structures Experiments can be designed and repeated vs. observed. Variation in form and function can be introduced The Human Skeleton - A (Branching) Serial Mechanism CNX OpenStax, CC BY 4.0, via Wikimedia Commons Many human joints can be approximated by \u201cbasic\u201d joint types Skeletons Can be Parallel Mechanisms Video https://www.youtube.com/watch?v=pDU4CQWXaNY Westneat, M.W. (1990), Feeding mechanics of teleost fishes (Labridae; Perciformes): A test of four-bar linkage models. J. Morphol., 205: 269-295. https://doi.org/10.1002/jmor.1052050304 Arthropod Joints From Barnes, R. D. 1964. Invertebrate Zoology. W. B. Saunders. Philadelphia. Found here Arthropod Joints Different Joint types, different degrees of freedom Wootton, Robert J.. \u201cInvertebrate paraxial locomotory appendages: design, deformation and control.\u201d The Journal of experimental biology 202 Pt 23 (1999): 3333-45 . Skeletal Muscle Tissue https://open.oregonstate.education/aandp/chapter/10-2-skeletal-muscle/ Anatomy & Physiology by Lindsay M. Biga, Sierra Dawson, Amy Harwell, Robin Hopkins, Joel Kaufmann, Mike LeMaster, Philip Matern, Katie Morrison-Graham, Devon Quick & Jon Runyeon is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License, except where otherwise noted. Skeletal Muscle Biewener, Andrew & Gillis, Gary. (2000). Dynamics of muscle function during locomotion: Accommodating variable conditions. The Journal of experimental biology. 202. 3387-96. 10.1242/jeb.202.23.3387. Work Loop https://en.wikipedia.org/wiki/Work_loop Muscles can do Different things Roberts, T. J., & Azizi, E. (2011). Flexible mechanisms: the diverse roles of biological springs in vertebrate movement. Journal of Experimental Biology, 214(3), 353\u2013361. https://doi.org/10.1242/jeb.038588 Inverted Pendulum vs Spring-Loaded Inverted Pendulum Passive Dynamic Walker Video SLIP Legs Video Implementations of SLIP A. Sprowitz, A. Tuleu, M. Vespignani, M. Ajallooeian, E. Badri, and A. J. Ijspeert, \u201cTowards dynamic trot gait locomotion: Design, control, and experiments with Cheetah-cub, a compliant quadruped robot,\u201d Int. J. Rob. Res., vol. 32, no. 8, pp. 932\u2013950, Jul. 2013. Video Video Cheetah Cub Video MIT Cheetah Video Different Animals M. H. Dickinson, \u201cHow Animals Move: An Integrative View,\u201d Science (80-. )., vol. 288, no. 5463, pp. 100\u2013106, Apr. 2000. Peristaltic Locomotion Mechanics of peristaltic locomotion and role of anchoringJ. R. Soc. Interface.9222\u2013233http://doi.org/10.1098/rsif.2011.0339 Peristaltic Video Undulatory Video Swimming In Sand Video Climbing with Stickybot Video Foldable-Compatible Legged Already Foldable Dash HAMR DynaROACH Non-Foldable ATRIAS/Cassie Penn Jerboa Stanford Doggo HAMR Video DASH Video ATRIAS Family ATRIAS / CASSIE Video","title":"Biomechanics and Bioinspiration"},{"location":"presentations/biomechanics-and-bioinspiration/#after-lunch-plan","text":"Origami Wrapup - More Mechanisms Biomechanics & Bioinspiration continue identifying important keywords and putting them in padlet Look up an animal look up keywords in google scholar Make a 1-slide presentation / proposal what motion do you want to find a video of it moving what information did you find on it? What\u2019s your idea for how to make it \u201cfoldable\u201d? Form Teams Make a body module.","title":"After Lunch Plan"},{"location":"presentations/biomechanics-and-bioinspiration/#bio-inspiration","text":"Robotic Systems help us understand the biological world Can mimic biological structures Experiments can be designed and repeated vs. observed. Variation in form and function can be introduced","title":"Bio-Inspiration"},{"location":"presentations/biomechanics-and-bioinspiration/#the-human-skeleton-a-branching-serial-mechanism","text":"CNX OpenStax, CC BY 4.0, via Wikimedia Commons Many human joints can be approximated by \u201cbasic\u201d joint types","title":"The Human Skeleton - A (Branching) Serial Mechanism"},{"location":"presentations/biomechanics-and-bioinspiration/#skeletons-can-be-parallel-mechanisms","text":"Video https://www.youtube.com/watch?v=pDU4CQWXaNY Westneat, M.W. (1990), Feeding mechanics of teleost fishes (Labridae; Perciformes): A test of four-bar linkage models. J. Morphol., 205: 269-295. https://doi.org/10.1002/jmor.1052050304","title":"Skeletons Can be Parallel Mechanisms"},{"location":"presentations/biomechanics-and-bioinspiration/#arthropod-joints","text":"From Barnes, R. D. 1964. Invertebrate Zoology. W. B. Saunders. Philadelphia. Found here","title":"Arthropod Joints"},{"location":"presentations/biomechanics-and-bioinspiration/#arthropod-joints_1","text":"Different Joint types, different degrees of freedom Wootton, Robert J.. \u201cInvertebrate paraxial locomotory appendages: design, deformation and control.\u201d The Journal of experimental biology 202 Pt 23 (1999): 3333-45 .","title":"Arthropod Joints"},{"location":"presentations/biomechanics-and-bioinspiration/#skeletal-muscle-tissue","text":"https://open.oregonstate.education/aandp/chapter/10-2-skeletal-muscle/ Anatomy & Physiology by Lindsay M. Biga, Sierra Dawson, Amy Harwell, Robin Hopkins, Joel Kaufmann, Mike LeMaster, Philip Matern, Katie Morrison-Graham, Devon Quick & Jon Runyeon is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License, except where otherwise noted.","title":"Skeletal Muscle Tissue"},{"location":"presentations/biomechanics-and-bioinspiration/#skeletal-muscle","text":"Biewener, Andrew & Gillis, Gary. (2000). Dynamics of muscle function during locomotion: Accommodating variable conditions. The Journal of experimental biology. 202. 3387-96. 10.1242/jeb.202.23.3387.","title":"Skeletal Muscle"},{"location":"presentations/biomechanics-and-bioinspiration/#work-loop","text":"https://en.wikipedia.org/wiki/Work_loop","title":"Work Loop"},{"location":"presentations/biomechanics-and-bioinspiration/#muscles-can-do-different-things","text":"Roberts, T. J., & Azizi, E. (2011). Flexible mechanisms: the diverse roles of biological springs in vertebrate movement. Journal of Experimental Biology, 214(3), 353\u2013361. https://doi.org/10.1242/jeb.038588","title":"Muscles can do Different things"},{"location":"presentations/biomechanics-and-bioinspiration/#inverted-pendulum-vs-spring-loaded-inverted-pendulum","text":"","title":"Inverted Pendulum vs Spring-Loaded Inverted Pendulum"},{"location":"presentations/biomechanics-and-bioinspiration/#passive-dynamic-walker","text":"Video","title":"Passive Dynamic Walker"},{"location":"presentations/biomechanics-and-bioinspiration/#slip-legs","text":"Video","title":"SLIP Legs"},{"location":"presentations/biomechanics-and-bioinspiration/#implementations-of-slip","text":"A. Sprowitz, A. Tuleu, M. Vespignani, M. Ajallooeian, E. Badri, and A. J. Ijspeert, \u201cTowards dynamic trot gait locomotion: Design, control, and experiments with Cheetah-cub, a compliant quadruped robot,\u201d Int. J. Rob. Res., vol. 32, no. 8, pp. 932\u2013950, Jul. 2013.","title":"Implementations of SLIP"},{"location":"presentations/biomechanics-and-bioinspiration/#_1","text":"Video","title":""},{"location":"presentations/biomechanics-and-bioinspiration/#_2","text":"Video","title":""},{"location":"presentations/biomechanics-and-bioinspiration/#cheetah-cub","text":"Video","title":"Cheetah Cub"},{"location":"presentations/biomechanics-and-bioinspiration/#mit-cheetah","text":"Video","title":"MIT Cheetah"},{"location":"presentations/biomechanics-and-bioinspiration/#different-animals","text":"M. H. Dickinson, \u201cHow Animals Move: An Integrative View,\u201d Science (80-. )., vol. 288, no. 5463, pp. 100\u2013106, Apr. 2000.","title":"Different Animals"},{"location":"presentations/biomechanics-and-bioinspiration/#peristaltic-locomotion","text":"Mechanics of peristaltic locomotion and role of anchoringJ. R. Soc. Interface.9222\u2013233http://doi.org/10.1098/rsif.2011.0339","title":"Peristaltic Locomotion"},{"location":"presentations/biomechanics-and-bioinspiration/#peristaltic","text":"Video","title":"Peristaltic"},{"location":"presentations/biomechanics-and-bioinspiration/#undulatory","text":"Video","title":"Undulatory"},{"location":"presentations/biomechanics-and-bioinspiration/#swimming-in-sand","text":"Video","title":"Swimming In Sand"},{"location":"presentations/biomechanics-and-bioinspiration/#climbing-with-stickybot","text":"Video","title":"Climbing with Stickybot"},{"location":"presentations/biomechanics-and-bioinspiration/#foldable-compatible-legged","text":"Already Foldable Dash HAMR DynaROACH Non-Foldable ATRIAS/Cassie Penn Jerboa Stanford Doggo","title":"Foldable-Compatible Legged"},{"location":"presentations/biomechanics-and-bioinspiration/#hamr","text":"Video","title":"HAMR"},{"location":"presentations/biomechanics-and-bioinspiration/#dash","text":"Video","title":"DASH"},{"location":"presentations/biomechanics-and-bioinspiration/#atrias-family","text":"","title":"ATRIAS Family"},{"location":"presentations/biomechanics-and-bioinspiration/#atrias-cassie","text":"Video","title":"ATRIAS / CASSIE"},{"location":"presentations/esp32-and-micropython/","text":"Welcome Group Padlet Link HERE Presentation Folder Vocab Review from Yesterday! Go to our Kahoot Game! https://play.kahoot.it/v2/?quizId=b9e3cfc4-d2fe-4c3f-adad-e9f343f837cd Overview of the ESP32 DevKit DOIT V1 Pinouts / Schematics from https://randomnerdtutorials.com/getting-started-with-esp32/ Board Layout Mount your ESP32 on your Breadboard ESP32 Links Espressif ESP32-WROOM-32 Datasheet ESP32-Devkit-C Page Devkit Technical Documents External Pinout Resources https://johnmu.com/picking-esp32-dev-board/ https://www.etechnophiles.com/esp32-dev-board-pinout-specifications-datasheet-and-schematic/ https://www.studiopieters.nl/esp32-pinout/ MicroPython Intro What is Python? Easy to learn programming language Interpreted Language - write code and have it execute without compiling! Simple formatting: mostly spaces, few extraneous characters, similar basic keywords as other languages, easy access to complex data types An extensible system of software \u201cpackages\u201d use pip/pypi to install install straight from github! as of March 2022, tiobe.com Is there anything else? \u201cDynamically Typed\u201d Variables don\u2019t need to be declared as one type or another. You simply set them equal to something and they become that data type. Object-oriented concept of classes and inheritance \u201cPublic\u201d by definition data is not easily hidden. data is accessible by anything So then, why other languages? Lower level languages can be easier to connect to hardware\u2019s functionality Compilation makes running code faster and more memory efficient What is Anaconda/Miniconda? A \u201cdistribution\u201d of Python for your PC A way to manage all the \u201cpackages\u201d you can install on your PC A solution for dealing with conflicting installation requirements. A way to share packages that contained OS-specific, compiled libraries. What is MicroPython? A slimmed down, limited version of Python that fits within the program space of a little microcontroller The system of software packages written for it The same idea of an interpreter\u2026 you just access it over USB. What is Thonny? a Graphical User Interface (GUI) written in Python A text editor The interface to your device and its interpreter A nice way to re-flash your device Python Interpreter Simple program that runs scripts or typed commands. A lot like bash, powershell, or cmd, only cross-platform and independent of the operating system. Ok, so how do I get started? Install Miniconda Get ESP32 Working Install Thonny Packages Install USB Device Drivers Flash the ESP32 with MicroPython over USB Start writing code\u2026 Working With Thonny See this Tutorial Python Tutorials Basic Data Types Advanced Data Types Operators and Operations Conditional Statements (If-then) Loops (For/While) Functions Classes First ESP32 Program from machine import Pin from time import sleep led = Pin(2, Pin.OUT) while True: led.value(1) sleep(1) led.value(0) sleep(1) ESP32 Wifi Access Point and Web Server # Combination of the following tutorials: # https://randomnerdtutorials.com/esp32-esp8266-micropython-web-server/ # https://randomnerdtutorials.com/micropython-esp32-esp8266-access-point-ap/ try: import usocket as socket except: import socket import network import esp esp.osdebug(None) ssid = 'MicroPython-AP-Dan' password = '123456789' ap = network.WLAN(network.AP_IF) ap.active(True) ap.config(essid=ssid, password=password) while ap.active() == False: pass print('Connection successful') print(ap.ifconfig()) from machine import Pin led = Pin(2, Pin.OUT) def web_page(): if led.value() == 1: gpio_state=\"ON\" else: gpio_state=\"OFF\" html = \"\"\"<html><head> <title>ESP Web Server</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"icon\" href=\"data:,\"> <style>html{font-family: Helvetica; display:inline-block; margin: 0px auto; text-align: center;} h1{color: #0F3376; padding: 2vh;}p{font-size: 1.5rem;}.button{display: inline-block; background-color: #e7bd3b; border: none; border-radius: 4px; color: white; padding: 16px 40px; text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;} .button2{background-color: #4286f4;}</style></head><body> <h1>ESP Web Server</h1> <p>GPIO state: <strong>\"\"\" + gpio_state + \"\"\"</strong></p><p><a href=\"/?led=on\"><button class=\"button\">ON</button></a></p> <p><a href=\"/?led=off\"><button class=\"button button2\">OFF</button></a></p></body></html>\"\"\" return html s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', 80)) s.listen(5) while True: conn, addr = s.accept() print('Got a connection from %s' % str(addr)) request = conn.recv(1024) request = str(request) print('Content = %s' % request) led_on = request.find('/?led=on') led_off = request.find('/?led=off') if led_on == 6: print('LED ON') led.value(1) if led_off == 6: print('LED OFF') led.value(0) response = web_page() conn.send('HTTP/1.1 200 OK\\n') conn.send('Content-Type: text/html\\n') conn.send('Connection: close\\n\\n') conn.sendall(response) conn.close() Analog Sensor Reading from machine import Pin, ADC from time import sleep pot = ADC(Pin(34)) pot.atten(ADC.ATTN_11DB) #Full range: 3.3v while True: pot_value = pot.read() print(pot_value) sleep(0.1) MicroPython / ESP32 Resources MicroPython for ESP32 firmware download page ESP32 Micropython Documentation quickref Asynchronous micropython-based MQTT repository","title":"ESP32 and MicroPython"},{"location":"presentations/esp32-and-micropython/#welcome","text":"Group Padlet Link HERE Presentation Folder","title":"Welcome"},{"location":"presentations/esp32-and-micropython/#vocab-review-from-yesterday","text":"Go to our Kahoot Game! https://play.kahoot.it/v2/?quizId=b9e3cfc4-d2fe-4c3f-adad-e9f343f837cd","title":"Vocab Review from Yesterday!"},{"location":"presentations/esp32-and-micropython/#overview-of-the-esp32-devkit-doit-v1","text":"","title":"Overview of the ESP32 DevKit DOIT V1"},{"location":"presentations/esp32-and-micropython/#pinouts-schematics","text":"from https://randomnerdtutorials.com/getting-started-with-esp32/","title":"Pinouts / Schematics"},{"location":"presentations/esp32-and-micropython/#board-layout","text":"","title":"Board Layout"},{"location":"presentations/esp32-and-micropython/#mount-your-esp32-on-your-breadboard","text":"","title":"Mount your ESP32 on your Breadboard"},{"location":"presentations/esp32-and-micropython/#esp32-links","text":"Espressif ESP32-WROOM-32 Datasheet ESP32-Devkit-C Page Devkit Technical Documents External Pinout Resources https://johnmu.com/picking-esp32-dev-board/ https://www.etechnophiles.com/esp32-dev-board-pinout-specifications-datasheet-and-schematic/ https://www.studiopieters.nl/esp32-pinout/","title":"ESP32 Links"},{"location":"presentations/esp32-and-micropython/#micropython-intro","text":"","title":"MicroPython Intro"},{"location":"presentations/esp32-and-micropython/#what-is-python","text":"Easy to learn programming language Interpreted Language - write code and have it execute without compiling! Simple formatting: mostly spaces, few extraneous characters, similar basic keywords as other languages, easy access to complex data types An extensible system of software \u201cpackages\u201d use pip/pypi to install install straight from github! as of March 2022, tiobe.com","title":"What is Python?"},{"location":"presentations/esp32-and-micropython/#is-there-anything-else","text":"\u201cDynamically Typed\u201d Variables don\u2019t need to be declared as one type or another. You simply set them equal to something and they become that data type. Object-oriented concept of classes and inheritance \u201cPublic\u201d by definition data is not easily hidden. data is accessible by anything","title":"Is there anything else?"},{"location":"presentations/esp32-and-micropython/#so-then-why-other-languages","text":"Lower level languages can be easier to connect to hardware\u2019s functionality Compilation makes running code faster and more memory efficient","title":"So then, why other languages?"},{"location":"presentations/esp32-and-micropython/#what-is-anacondaminiconda","text":"A \u201cdistribution\u201d of Python for your PC A way to manage all the \u201cpackages\u201d you can install on your PC A solution for dealing with conflicting installation requirements. A way to share packages that contained OS-specific, compiled libraries.","title":"What is Anaconda/Miniconda?"},{"location":"presentations/esp32-and-micropython/#what-is-micropython","text":"A slimmed down, limited version of Python that fits within the program space of a little microcontroller The system of software packages written for it The same idea of an interpreter\u2026 you just access it over USB.","title":"What is MicroPython?"},{"location":"presentations/esp32-and-micropython/#what-is-thonny","text":"a Graphical User Interface (GUI) written in Python A text editor The interface to your device and its interpreter A nice way to re-flash your device","title":"What is Thonny?"},{"location":"presentations/esp32-and-micropython/#python-interpreter","text":"Simple program that runs scripts or typed commands. A lot like bash, powershell, or cmd, only cross-platform and independent of the operating system.","title":"Python Interpreter"},{"location":"presentations/esp32-and-micropython/#ok-so-how-do-i-get-started","text":"Install Miniconda Get ESP32 Working Install Thonny Packages Install USB Device Drivers Flash the ESP32 with MicroPython over USB Start writing code\u2026","title":"Ok, so how do I get started?"},{"location":"presentations/esp32-and-micropython/#working-with-thonny","text":"See this Tutorial","title":"Working With Thonny"},{"location":"presentations/esp32-and-micropython/#python-tutorials","text":"Basic Data Types Advanced Data Types Operators and Operations Conditional Statements (If-then) Loops (For/While) Functions Classes","title":"Python Tutorials"},{"location":"presentations/esp32-and-micropython/#first-esp32-program","text":"from machine import Pin from time import sleep led = Pin(2, Pin.OUT) while True: led.value(1) sleep(1) led.value(0) sleep(1)","title":"First ESP32 Program"},{"location":"presentations/esp32-and-micropython/#esp32-wifi-access-point-and-web-server","text":"# Combination of the following tutorials: # https://randomnerdtutorials.com/esp32-esp8266-micropython-web-server/ # https://randomnerdtutorials.com/micropython-esp32-esp8266-access-point-ap/ try: import usocket as socket except: import socket import network import esp esp.osdebug(None) ssid = 'MicroPython-AP-Dan' password = '123456789' ap = network.WLAN(network.AP_IF) ap.active(True) ap.config(essid=ssid, password=password) while ap.active() == False: pass print('Connection successful') print(ap.ifconfig()) from machine import Pin led = Pin(2, Pin.OUT) def web_page(): if led.value() == 1: gpio_state=\"ON\" else: gpio_state=\"OFF\" html = \"\"\"<html><head> <title>ESP Web Server</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"icon\" href=\"data:,\"> <style>html{font-family: Helvetica; display:inline-block; margin: 0px auto; text-align: center;} h1{color: #0F3376; padding: 2vh;}p{font-size: 1.5rem;}.button{display: inline-block; background-color: #e7bd3b; border: none; border-radius: 4px; color: white; padding: 16px 40px; text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;} .button2{background-color: #4286f4;}</style></head><body> <h1>ESP Web Server</h1> <p>GPIO state: <strong>\"\"\" + gpio_state + \"\"\"</strong></p><p><a href=\"/?led=on\"><button class=\"button\">ON</button></a></p> <p><a href=\"/?led=off\"><button class=\"button button2\">OFF</button></a></p></body></html>\"\"\" return html s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', 80)) s.listen(5) while True: conn, addr = s.accept() print('Got a connection from %s' % str(addr)) request = conn.recv(1024) request = str(request) print('Content = %s' % request) led_on = request.find('/?led=on') led_off = request.find('/?led=off') if led_on == 6: print('LED ON') led.value(1) if led_off == 6: print('LED OFF') led.value(0) response = web_page() conn.send('HTTP/1.1 200 OK\\n') conn.send('Content-Type: text/html\\n') conn.send('Connection: close\\n\\n') conn.sendall(response) conn.close()","title":"ESP32 Wifi Access Point and Web Server"},{"location":"presentations/esp32-and-micropython/#analog-sensor-reading","text":"from machine import Pin, ADC from time import sleep pot = ADC(Pin(34)) pot.atten(ADC.ATTN_11DB) #Full range: 3.3v while True: pot_value = pot.read() print(pot_value) sleep(0.1)","title":"Analog Sensor Reading"},{"location":"presentations/esp32-and-micropython/#micropython-esp32-resources","text":"MicroPython for ESP32 firmware download page ESP32 Micropython Documentation quickref Asynchronous micropython-based MQTT repository","title":"MicroPython / ESP32 Resources"},{"location":"presentations/final-build-day/","text":"To-Do Consider Adding Advanced WiFi Control Sensing Time-based functions (sinusoid function) Vinyl-Cut Parts \u2026other ideas? Camp is Over. Now What? Consider joining or starting a robotics club at your school Vex Robotics First Robotics Take your kit home, continue learning I will provide the parts list if you want to expand or re-order parts Today\u2019s Schedule 9-11:45 Final Build Session 11:45-12:45 Lunch & Mixer 1-1:30 Innovation Hub Tour 1:30-2:00 Final Documentation 2:00-2:30 Cleanup 2:30-3:00 Internal Presentations 3-4 Showcase!","title":"Final Build Day"},{"location":"presentations/final-build-day/#to-do","text":"Consider Adding Advanced WiFi Control Sensing Time-based functions (sinusoid function) Vinyl-Cut Parts \u2026other ideas?","title":"To-Do"},{"location":"presentations/final-build-day/#camp-is-over-now-what","text":"Consider joining or starting a robotics club at your school Vex Robotics First Robotics Take your kit home, continue learning I will provide the parts list if you want to expand or re-order parts","title":"Camp is Over.  Now What?"},{"location":"presentations/final-build-day/#todays-schedule","text":"9-11:45 Final Build Session 11:45-12:45 Lunch & Mixer 1-1:30 Innovation Hub Tour 1:30-2:00 Final Documentation 2:00-2:30 Cleanup 2:30-3:00 Internal Presentations 3-4 Showcase!","title":"Today\u2019s Schedule"},{"location":"presentations/foldable-mechanisms/","text":"Keywords Mechanism Linkage Link Joint Degrees of Freedom Why are we talking about foldable mechanisms? Robots are mechanisms, or machines. Serial vs. Parallel Composed of links and joints Mechanisms A system of parts working together in a machine; a piece of machinery. https://en.wikipedia.org/wiki/Mechanism_(engineering) https://languages.oup.com/google-dictionary-en/ Structures? What is a structure? Linkage A system of links; especially a system of links or bars which are jointed together and more or less constrained by having a link or links fixed and by means of which straight or nearly straight lines or other point paths may be traced https://www.merriam-webster.com/dictionary/linkage https://en.wikipedia.org/wiki/Linkage_(mechanical)\\ Link An intermediate rod or piece for transmitting force or motion; especially, a short connecting rod with a hole or pin at each end. Joints In robotics, joints are the (moving) connections between rigid bodies Many different kinds of joints Folded devices use Flores, Paulo & Lankarani, Hamid. (2016). Contact Force Models for Multibody Dynamics. Degrees of Freedom \u201cThe number of independent parameters that define its configuration or state\u201d The position of a single railcar (engine) moving along a track has one degree of freedom Position and orientation of a rigid body in space is defined by three components of translation and three components of rotation, which means that it has six degrees of freedom. https://en.wikipedia.org/wiki/Degrees_of_freedom_(mechanics) More Complex Joints Chase, Kenneth & Magleby, Spencer & Glancy, Charles. (2000). A Comprehensive System for Computer-Aided Tolerance Analysis of 2-D and 3-D Mechanical Assemblies. 10.1007/978-1-4615-5797-5_23. Joints https://24.media.tumblr.com/tumblr_mck6ejg15N1r0v3zro3_1280.jpg Types of Linkages Planar four-bar five-bar six-bar \u2026 Spherical four-bar five-bar six-bar \u2026 Other: Sarrus Straight-line Slider-Crank More Info https://en.wikipedia.org/wiki/Linkage_(mechanical)#Image_gallery https://engineering.library.cornell.edu/kmoddl/ Activity Get out construction paper, scissors, staplers, etc Origami vs. Kirigami https://www.youtube.com/watch?v=kUsxMXwCW8A Origami: Less about mechanisms than \u201cstructures\u201d or \u201cform\u201d Origami is not about creating mechanisms \u201cFoldable\u201d Links How can you stiffen material to create a better link? \u2026 \u2026 \u2026 Engineering Context: I-beams \u201cFoldable\u201d Joints What joints can you make with origami/kirigami techniques? How can you weaken material to create a better joint? \u2026 \u2026 \u2026 Identical mechanisms, many ways to get there Four-Bar Linkage Example Sarrus Example","title":"Foldable Mechanisms"},{"location":"presentations/foldable-mechanisms/#keywords","text":"Mechanism Linkage Link Joint Degrees of Freedom","title":"Keywords"},{"location":"presentations/foldable-mechanisms/#why-are-we-talking-about-foldable-mechanisms","text":"Robots are mechanisms, or machines. Serial vs. Parallel Composed of links and joints","title":"Why are we talking about foldable mechanisms?"},{"location":"presentations/foldable-mechanisms/#mechanisms","text":"A system of parts working together in a machine; a piece of machinery. https://en.wikipedia.org/wiki/Mechanism_(engineering) https://languages.oup.com/google-dictionary-en/","title":"Mechanisms"},{"location":"presentations/foldable-mechanisms/#structures","text":"What is a structure?","title":"Structures?"},{"location":"presentations/foldable-mechanisms/#linkage","text":"A system of links; especially a system of links or bars which are jointed together and more or less constrained by having a link or links fixed and by means of which straight or nearly straight lines or other point paths may be traced https://www.merriam-webster.com/dictionary/linkage https://en.wikipedia.org/wiki/Linkage_(mechanical)\\","title":"Linkage"},{"location":"presentations/foldable-mechanisms/#link","text":"An intermediate rod or piece for transmitting force or motion; especially, a short connecting rod with a hole or pin at each end.","title":"Link"},{"location":"presentations/foldable-mechanisms/#joints","text":"In robotics, joints are the (moving) connections between rigid bodies Many different kinds of joints Folded devices use Flores, Paulo & Lankarani, Hamid. (2016). Contact Force Models for Multibody Dynamics.","title":"Joints"},{"location":"presentations/foldable-mechanisms/#degrees-of-freedom","text":"\u201cThe number of independent parameters that define its configuration or state\u201d The position of a single railcar (engine) moving along a track has one degree of freedom Position and orientation of a rigid body in space is defined by three components of translation and three components of rotation, which means that it has six degrees of freedom. https://en.wikipedia.org/wiki/Degrees_of_freedom_(mechanics)","title":"Degrees of Freedom"},{"location":"presentations/foldable-mechanisms/#more-complex-joints","text":"Chase, Kenneth & Magleby, Spencer & Glancy, Charles. (2000). A Comprehensive System for Computer-Aided Tolerance Analysis of 2-D and 3-D Mechanical Assemblies. 10.1007/978-1-4615-5797-5_23.","title":"More Complex Joints"},{"location":"presentations/foldable-mechanisms/#joints_1","text":"https://24.media.tumblr.com/tumblr_mck6ejg15N1r0v3zro3_1280.jpg","title":"Joints"},{"location":"presentations/foldable-mechanisms/#types-of-linkages","text":"Planar four-bar five-bar six-bar \u2026 Spherical four-bar five-bar six-bar \u2026 Other: Sarrus Straight-line Slider-Crank More Info https://en.wikipedia.org/wiki/Linkage_(mechanical)#Image_gallery https://engineering.library.cornell.edu/kmoddl/","title":"Types of Linkages"},{"location":"presentations/foldable-mechanisms/#activity","text":"Get out construction paper, scissors, staplers, etc","title":"Activity"},{"location":"presentations/foldable-mechanisms/#origami-vs-kirigami","text":"https://www.youtube.com/watch?v=kUsxMXwCW8A Origami: Less about mechanisms than \u201cstructures\u201d or \u201cform\u201d","title":"Origami vs. Kirigami"},{"location":"presentations/foldable-mechanisms/#origami-is-not-about-creating-mechanisms","text":"","title":"Origami is not about creating mechanisms"},{"location":"presentations/foldable-mechanisms/#foldable-links","text":"How can you stiffen material to create a better link? \u2026 \u2026 \u2026 Engineering Context: I-beams","title":"\u201cFoldable\u201d Links"},{"location":"presentations/foldable-mechanisms/#foldable-joints","text":"What joints can you make with origami/kirigami techniques? How can you weaken material to create a better joint? \u2026 \u2026 \u2026","title":"\u201cFoldable\u201d Joints"},{"location":"presentations/foldable-mechanisms/#identical-mechanisms-many-ways-to-get-there","text":"Four-Bar Linkage Example Sarrus Example","title":"Identical mechanisms, many ways to get there"},{"location":"presentations/introduction/","text":"Welcome to Foldable Robotics Day Camp Daniel M. Aukes, PhD Assistant Professor here at ASU Teach classes related to robotics, engineering, and embedded systems You can call me Dr. Aukes or Dan Research Foldable Robotics and other \u201cinformal\u201d robot design methods I will try to talk a little about my research at the end of the week Please let me know if you don\u2019t understand what I am saying\u2026I\u2019m an expert, I can\u2019t help it! Mr. Colfer Please tell us about yourself! How should we refer to you? Ms. Mason Please tell us about yourself! How should we refer to you? Get to know you Go around the world and introduce yourself Name School One thing you know about robots. LOGISTICS Foldable Robotics Info Site https://idealab.asu.edu/foldable-robotics-info/ Other Logistics Room Layout Bathrooms Teaming Kits Questions? Group Padlet Link HERE WIFI Info SSID: photon PW: particle Presentation Folder","title":"Introduction"},{"location":"presentations/introduction/#welcome-to-foldable-robotics-day-camp","text":"","title":"Welcome to Foldable Robotics Day Camp"},{"location":"presentations/introduction/#daniel-m-aukes-phd","text":"Assistant Professor here at ASU Teach classes related to robotics, engineering, and embedded systems You can call me Dr. Aukes or Dan Research Foldable Robotics and other \u201cinformal\u201d robot design methods I will try to talk a little about my research at the end of the week Please let me know if you don\u2019t understand what I am saying\u2026I\u2019m an expert, I can\u2019t help it!","title":"Daniel M. Aukes, PhD"},{"location":"presentations/introduction/#mr-colfer","text":"Please tell us about yourself! How should we refer to you?","title":"Mr.\u00a0Colfer"},{"location":"presentations/introduction/#ms-mason","text":"Please tell us about yourself! How should we refer to you?","title":"Ms.\u00a0Mason"},{"location":"presentations/introduction/#get-to-know-you","text":"Go around the world and introduce yourself Name School One thing you know about robots.","title":"Get to know you"},{"location":"presentations/introduction/#logistics","text":"","title":"LOGISTICS"},{"location":"presentations/introduction/#foldable-robotics-info-site","text":"https://idealab.asu.edu/foldable-robotics-info/","title":"Foldable Robotics Info Site"},{"location":"presentations/introduction/#other-logistics","text":"Room Layout Bathrooms Teaming Kits Questions? Group Padlet Link HERE WIFI Info SSID: photon PW: particle Presentation Folder","title":"Other Logistics"},{"location":"presentations/rc-servos/","text":"What is an RC Servo Not just a motor, an \u201cElectromechanical System\u201d What\u2019s inside https://www.sparkfun.com/servos Common Servo Sizes How do you plug in a Servo? Three wires: Ground - usually black Power - usually red Signal - neither red nor black Other Kinds of Servos Linear Servos: Same idea, only you use a lead screw to translate the output rather than rotate Continuous Rotation Servos: The potentiometer is removed, so the control signal just relates to speed Servos with Feedback: Extra wire for position value Servo Mounting Ideas Controlling a Servo PWM: Pulse Width Modulation The \u201cvalue\u201d sent by a PWM signal is the proportion of the time on vs the \u201cperiod\u201d, or time between signals frequency = 1/period period = 200ms frequency = ? Python Code for Controlling a Servo from machine import Pin, PWM from time import sleep frequency = 50 range_low = 28 range_high = 122 servo1 = PWM(Pin(13), frequency) while True: servo1.duty(range_low) sleep(1) servo1.duty(range_high) sleep(1) More Advanced from machine import Pin, PWM from time import sleep frequency = 50 range_low = 28 range_high = 122 servo1 = PWM(Pin(13), frequency) servo2 = PWM(Pin(12), frequency) def angle_to_pwm(degrees): output_range = 122-28 input_range = 180-0 output_pwm = ((degrees/input_range)*output_range)+range_low return int(output_pwm) servo1.duty(angle_to_pwm(90)) while True: for angle in range(0,1800,1): print(angle/10) servo1.duty(angle_to_pwm(angle/10)) sleep(.01) for angle in range(1800,0,-1): print(angle/10) servo1.duty(angle_to_pwm(angle/10)) sleep(.01) Controlling a Sevo with respect to time #import all the libraries from machine import Pin from machine import PWM import time import math # define constants # This is the servo's driving frequency, which equals 20ms (1/f=t). frequency = 50 # This PWM value corresponds to the servo's smallest angle (0) range_low = 28 # This PWM value corresponds to the servo's largest angle (180) range_high = 122 # create a new PWM instance and call it servo1 servo1 = PWM(Pin(13), frequency) def angle_to_pwm(degrees): ''' this function converts a desired angle to its corresponding PWM value, using the range_low and range_high constants defined inline ''' # compute output scaling output_range = range_high-range_low # compute input scaling input_range = 180-0 # divide the desired angle by the input scaling, multiply #by the output scaling, and add the range_low value as an offset. output_pwm = ((degrees/input_range)*output_range)+range_low # return the computed value as an integer return int(output_pwm) # save the initial time in nanoseconds as t0 t0 = time.time_ns() def get_seconds_float(): ''' This function accesses the internal time_ns() function and converts it to a floating point value in seconds ''' # get current time, t in nanoseconds t = time.time_ns() # subtract from t0 to obtain the time since the program began dt = t-t0 # convert to a float firsty, and then convert from nanoseconds # to seconds by multiplying by 10^9 dt = float(dt)/1e9 # return the change in time. return dt def my_signal(t,A,f,b,t0=0): ''' convert the current time to a sinusoidal function with user-defined amplitude(A), frequency(f), DC offset (b), and time-offset(t0). ''' y = A*(math.sin(f*(t-t0)*math.pi*2)) + b return y # here is our main loop while True: # time.sleep is not as necessary...can be commented # out except if you want to print values out. #time.sleep(.01) # get the current time in (floating-point) seconds t = get_seconds_float() # compute the desired angle for servo 1 y1 = my_signal(t,60,.5,90) # print out the desired angle. Not essential, can be commented out print(y1) # set servo 1 pwm value according to the desired angle servo1.duty(angle_to_pwm(y1)) More Information https://www.sparkfun.com/servos Day 2 Kahoot Vocab Practice","title":"RC Servos"},{"location":"presentations/rc-servos/#what-is-an-rc-servo","text":"Not just a motor, an \u201cElectromechanical System\u201d","title":"What is an RC Servo"},{"location":"presentations/rc-servos/#whats-inside","text":"https://www.sparkfun.com/servos","title":"What\u2019s inside"},{"location":"presentations/rc-servos/#common-servo-sizes","text":"","title":"Common Servo Sizes"},{"location":"presentations/rc-servos/#how-do-you-plug-in-a-servo","text":"Three wires: Ground - usually black Power - usually red Signal - neither red nor black","title":"How do you plug in a Servo?"},{"location":"presentations/rc-servos/#other-kinds-of-servos","text":"Linear Servos: Same idea, only you use a lead screw to translate the output rather than rotate Continuous Rotation Servos: The potentiometer is removed, so the control signal just relates to speed Servos with Feedback: Extra wire for position value","title":"Other Kinds of Servos"},{"location":"presentations/rc-servos/#servo-mounting-ideas","text":"","title":"Servo Mounting Ideas"},{"location":"presentations/rc-servos/#controlling-a-servo","text":"PWM: Pulse Width Modulation The \u201cvalue\u201d sent by a PWM signal is the proportion of the time on vs the \u201cperiod\u201d, or time between signals frequency = 1/period period = 200ms frequency = ?","title":"Controlling a Servo"},{"location":"presentations/rc-servos/#python-code-for-controlling-a-servo","text":"from machine import Pin, PWM from time import sleep frequency = 50 range_low = 28 range_high = 122 servo1 = PWM(Pin(13), frequency) while True: servo1.duty(range_low) sleep(1) servo1.duty(range_high) sleep(1)","title":"Python Code for Controlling a Servo"},{"location":"presentations/rc-servos/#more-advanced","text":"from machine import Pin, PWM from time import sleep frequency = 50 range_low = 28 range_high = 122 servo1 = PWM(Pin(13), frequency) servo2 = PWM(Pin(12), frequency) def angle_to_pwm(degrees): output_range = 122-28 input_range = 180-0 output_pwm = ((degrees/input_range)*output_range)+range_low return int(output_pwm) servo1.duty(angle_to_pwm(90)) while True: for angle in range(0,1800,1): print(angle/10) servo1.duty(angle_to_pwm(angle/10)) sleep(.01) for angle in range(1800,0,-1): print(angle/10) servo1.duty(angle_to_pwm(angle/10)) sleep(.01)","title":"More Advanced"},{"location":"presentations/rc-servos/#controlling-a-sevo-with-respect-to-time","text":"#import all the libraries from machine import Pin from machine import PWM import time import math # define constants # This is the servo's driving frequency, which equals 20ms (1/f=t). frequency = 50 # This PWM value corresponds to the servo's smallest angle (0) range_low = 28 # This PWM value corresponds to the servo's largest angle (180) range_high = 122 # create a new PWM instance and call it servo1 servo1 = PWM(Pin(13), frequency) def angle_to_pwm(degrees): ''' this function converts a desired angle to its corresponding PWM value, using the range_low and range_high constants defined inline ''' # compute output scaling output_range = range_high-range_low # compute input scaling input_range = 180-0 # divide the desired angle by the input scaling, multiply #by the output scaling, and add the range_low value as an offset. output_pwm = ((degrees/input_range)*output_range)+range_low # return the computed value as an integer return int(output_pwm) # save the initial time in nanoseconds as t0 t0 = time.time_ns() def get_seconds_float(): ''' This function accesses the internal time_ns() function and converts it to a floating point value in seconds ''' # get current time, t in nanoseconds t = time.time_ns() # subtract from t0 to obtain the time since the program began dt = t-t0 # convert to a float firsty, and then convert from nanoseconds # to seconds by multiplying by 10^9 dt = float(dt)/1e9 # return the change in time. return dt def my_signal(t,A,f,b,t0=0): ''' convert the current time to a sinusoidal function with user-defined amplitude(A), frequency(f), DC offset (b), and time-offset(t0). ''' y = A*(math.sin(f*(t-t0)*math.pi*2)) + b return y # here is our main loop while True: # time.sleep is not as necessary...can be commented # out except if you want to print values out. #time.sleep(.01) # get the current time in (floating-point) seconds t = get_seconds_float() # compute the desired angle for servo 1 y1 = my_signal(t,60,.5,90) # print out the desired angle. Not essential, can be commented out print(y1) # set servo 1 pwm value according to the desired angle servo1.duty(angle_to_pwm(y1))","title":"Controlling a Sevo with respect to time"},{"location":"presentations/rc-servos/#more-information","text":"https://www.sparkfun.com/servos Day 2 Kahoot Vocab Practice","title":"More Information"}]}