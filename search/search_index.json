{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quick Overview Daily Schedule: The camp will run 9am-3:45pm Monday thru Friday June 12-16, 2023 in Peralta Hall, Room 103 on the ASU Polytechnic Campus. See our general information page for map and details. We will hold a student showcase from 3pm-4pm on Friday, June 16 . Check-in / Check-Out Doors open at 9am. Check-in is 9:00am to 9:15am . Doors close at 4pm. Please pick up your child between 3:45pm-4:00pm . We will station one of our teaching team out in Lot 30 near the 20-minute parking spots on Monday morning to guide campers and parents to the room. If you don't see anyone please proceed to the classroom to check your student in there. It is highly encouraged that you drop your student off each day rather than have them drive and pay for parking, as it is the most economical option (Parking information below ). Lot 30 is the closest and easiest dropoff location. There are 2 free 20-minute pickup/dropoff spots located here . We ask that you bring an ID each day, as our check-in/check-out procedure requires that we release students to an approved individual. You should have filled out your check-in/check-out preferences during registration, to indicate if you would prefer to have your child drive or if you would like to add other responsible adults who have your permission to check your student in and out. Please remember to bring your ID. If your student is driving themself, they should bring their driver's license or school ID. Locations Camp Classroom Peralta Hall Room 103 7171 E Sonoran Arroyo Mall Mesa, AZ 85212 Polytechnic Student Union 5999 S Backus Mall Mesa, AZ 85212 Parking Parking is strictly enforced at ASU; you must have a permit to park in most ASU lots, even in Summer. If your student is driving themselves, they should park in metered parking. This is available in lot 29 (closer) or lot 10 (overflow location). $12/day Credit card required at kiosk, or use the ParkMobile App (pre-install the app on your student's phone and connect a payment option in advance) Evaluation Participants in the course will be asked to participate in an evaluation of their experiences and perceptions. This is voluntary and all parents and students will be provided additional information at the time of enrollment to consent to participating in an end of the program survey. In order to continually improve the experiences of participating students, students will be provided a ten-minute survey at the completion of the course. The data will only be used if both parents and child consent to data collection; your child\u2019s status in the program is not impacted by the decision to complete the survey. The program is partnering with the College Research and Evaluation Services Team (CREST) at ASU provide external evaluation support to grants and will never share participant identifiers with program faculty or staff. Responses will be aggregated and reported in summary form for program improvement and possibly presentations or publications, but no identifying information will ever be shared. We appreciate your consideration to participate in this evaluation endeavor.","title":"General Information"},{"location":"#quick-overview","text":"Daily Schedule: The camp will run 9am-3:45pm Monday thru Friday June 12-16, 2023 in Peralta Hall, Room 103 on the ASU Polytechnic Campus. See our general information page for map and details. We will hold a student showcase from 3pm-4pm on Friday, June 16 .","title":"Quick Overview"},{"location":"#check-in-check-out","text":"Doors open at 9am. Check-in is 9:00am to 9:15am . Doors close at 4pm. Please pick up your child between 3:45pm-4:00pm . We will station one of our teaching team out in Lot 30 near the 20-minute parking spots on Monday morning to guide campers and parents to the room. If you don't see anyone please proceed to the classroom to check your student in there. It is highly encouraged that you drop your student off each day rather than have them drive and pay for parking, as it is the most economical option (Parking information below ). Lot 30 is the closest and easiest dropoff location. There are 2 free 20-minute pickup/dropoff spots located here . We ask that you bring an ID each day, as our check-in/check-out procedure requires that we release students to an approved individual. You should have filled out your check-in/check-out preferences during registration, to indicate if you would prefer to have your child drive or if you would like to add other responsible adults who have your permission to check your student in and out. Please remember to bring your ID. If your student is driving themself, they should bring their driver's license or school ID.","title":"Check-in / Check-Out"},{"location":"#locations","text":"","title":"Locations"},{"location":"#camp-classroom","text":"Peralta Hall Room 103 7171 E Sonoran Arroyo Mall Mesa, AZ 85212","title":"Camp Classroom"},{"location":"#polytechnic-student-union","text":"5999 S Backus Mall Mesa, AZ 85212","title":"Polytechnic Student Union"},{"location":"#parking","text":"Parking is strictly enforced at ASU; you must have a permit to park in most ASU lots, even in Summer. If your student is driving themselves, they should park in metered parking. This is available in lot 29 (closer) or lot 10 (overflow location). $12/day Credit card required at kiosk, or use the ParkMobile App (pre-install the app on your student's phone and connect a payment option in advance)","title":"Parking"},{"location":"#evaluation","text":"Participants in the course will be asked to participate in an evaluation of their experiences and perceptions. This is voluntary and all parents and students will be provided additional information at the time of enrollment to consent to participating in an end of the program survey. In order to continually improve the experiences of participating students, students will be provided a ten-minute survey at the completion of the course. The data will only be used if both parents and child consent to data collection; your child\u2019s status in the program is not impacted by the decision to complete the survey. The program is partnering with the College Research and Evaluation Services Team (CREST) at ASU provide external evaluation support to grants and will never share participant identifiers with program faculty or staff. Responses will be aggregated and reported in summary form for program improvement and possibly presentations or publications, but no identifying information will ever be shared. We appreciate your consideration to participate in this evaluation endeavor.","title":"Evaluation"},{"location":"classroom-info/","text":"Padlet Link: https://padlet.com/mchicci2/foldable-robotics-camp-m27h0tfd9n0f57xp wifi info: SSID: photon passowrd: particle Workstation PCs user: temp1139 password: MSNCamp2023!","title":"Classroom Info"},{"location":"classroom-info/#wifi-info","text":"SSID: photon passowrd: particle","title":"wifi info:"},{"location":"classroom-info/#workstation-pcs","text":"user: temp1139 password: MSNCamp2023!","title":"Workstation PCs"},{"location":"daily-schedule/","text":"Daily Schedule Time* Description Location 9:00 Doors Open Peralta 103 9:00-9:15 Check-in Peralta 103 9:15 Morning Session Peralta 103 9:15 Topic 1 Peralta 103 10:30 Bio Break Peralta 10:35 Topic 2 Peralta 103 11:45 Reflection / Kahoot Peralta 103 12:00 Lunch Break Student Union 1:00 Afternoon Session Peralta 103 1:00 Topic 3 Peralta 103 2:15 Bio Break Peralta 2:20 Topic 4 Peralta 103 3:25 Reflection / Kahoot Peralta 103 3:40 Cleanup Peralta 103 3:45-4:00 Check-out Peralta 103 4:00 Doors Close Peralta 103 * All times approximate","title":"Daily Schedule"},{"location":"daily-schedule/#daily-schedule","text":"Time* Description Location 9:00 Doors Open Peralta 103 9:00-9:15 Check-in Peralta 103 9:15 Morning Session Peralta 103 9:15 Topic 1 Peralta 103 10:30 Bio Break Peralta 10:35 Topic 2 Peralta 103 11:45 Reflection / Kahoot Peralta 103 12:00 Lunch Break Student Union 1:00 Afternoon Session Peralta 103 1:00 Topic 3 Peralta 103 2:15 Bio Break Peralta 2:20 Topic 4 Peralta 103 3:25 Reflection / Kahoot Peralta 103 3:40 Cleanup Peralta 103 3:45-4:00 Check-out Peralta 103 4:00 Doors Close Peralta 103 * All times approximate","title":"Daily Schedule"},{"location":"instructor-information/","text":"Instructor Information Dan Aukes Dan Aukes is an Assistant Professor at Arizona State University at the Polytechnic Campus. He runs the IDEAlab where his research focuses on the design of robots using everyday, uncommon, and new materials. Contact info: In case there is a logistical problem with regard to student dropoff/pickup or other immediate need, please contact Dr. Aukes at: email: danaukes@asu.edu mobile: 650-353-1241 Max Colfer Max is a 7-12th grade STEM teacher at ASU Preparatory Polytechnic Academy. He is passionate about science and the student experience, and is looking forward to helping students apply the knowledge they achieve in creative and innovative ways. Matthew Chicci Matthew is a STEM teacher at ASU Preparatory Polytechnic Academy. Dongting (Shawn) Li Shawn Li is a graduating PhD student at ASU. His expertise is in robot design, prototyping, and developmen and experimentation. He recently defended his thesis on origami-inspired robots. Roberto Siqueiros Roberto is a Masters Student in Robotics and Autonomous Systems at ASU Poly.","title":"Instructor Information"},{"location":"instructor-information/#instructor-information","text":"","title":"Instructor Information"},{"location":"instructor-information/#dan-aukes","text":"Dan Aukes is an Assistant Professor at Arizona State University at the Polytechnic Campus. He runs the IDEAlab where his research focuses on the design of robots using everyday, uncommon, and new materials. Contact info: In case there is a logistical problem with regard to student dropoff/pickup or other immediate need, please contact Dr. Aukes at: email: danaukes@asu.edu mobile: 650-353-1241","title":"Dan Aukes"},{"location":"instructor-information/#max-colfer","text":"Max is a 7-12th grade STEM teacher at ASU Preparatory Polytechnic Academy. He is passionate about science and the student experience, and is looking forward to helping students apply the knowledge they achieve in creative and innovative ways.","title":"Max Colfer"},{"location":"instructor-information/#matthew-chicci","text":"Matthew is a STEM teacher at ASU Preparatory Polytechnic Academy.","title":"Matthew Chicci"},{"location":"instructor-information/#dongting-shawn-li","text":"Shawn Li is a graduating PhD student at ASU. His expertise is in robot design, prototyping, and developmen and experimentation. He recently defended his thesis on origami-inspired robots.","title":"Dongting (Shawn) Li"},{"location":"instructor-information/#roberto-siqueiros","text":"Roberto is a Masters Student in Robotics and Autonomous Systems at ASU Poly.","title":"Roberto Siqueiros"},{"location":"what-to-bring/","text":"What to Bring Each Day Backpack Close-Toed Shoes Lunch or Lunch Money Phone / Camera (for data collection) Laptop (recommended; see below for more info) Water Bottle Personal Snacks Notebook & Pen Driver's License or official ID (for check-in and check-out) First Day Adult driver's license (for adult check-in and check-out) or Student driver's license (for student check-in and check-out) Last Day Take your kits home! Food, Water, Snacks It is highly encouraged that students bring their lunch as it is the most economical option, but food is available for purchase on campus. There are no easily accessible fridges nearby to the classroom, so please remember to bring an ice-pack to keep lunches fresh through the morning. Available Food Options: Subway Qdoba Mexican Grill (as available) Starbucks Polytechnic Marketplace (convenience store) Students should bring their own snacks and a personal water bottle. Laptops and Software We encourage students to bring their own laptop. We are able to support the following operating systems*: Windows Mac Linux *Unfortunately, chromebooks do not currently support the software and hardware we plan to use. If you are bringing a laptop, please ensure your student has the proper user permissions for installing new software on the laptop. Otherwise, please go ahead and install the following software in advance: Visual Studio Code Silabs cp210x driver (windows only) Tracker Optional Software Miniconda CreateSpace There are also a number of PCs in the classroom that will be available.","title":"What to Bring"},{"location":"what-to-bring/#what-to-bring","text":"","title":"What to Bring"},{"location":"what-to-bring/#each-day","text":"Backpack Close-Toed Shoes Lunch or Lunch Money Phone / Camera (for data collection) Laptop (recommended; see below for more info) Water Bottle Personal Snacks Notebook & Pen Driver's License or official ID (for check-in and check-out)","title":"Each Day"},{"location":"what-to-bring/#first-day","text":"Adult driver's license (for adult check-in and check-out) or Student driver's license (for student check-in and check-out)","title":"First Day"},{"location":"what-to-bring/#last-day","text":"Take your kits home!","title":"Last Day"},{"location":"what-to-bring/#food-water-snacks","text":"It is highly encouraged that students bring their lunch as it is the most economical option, but food is available for purchase on campus. There are no easily accessible fridges nearby to the classroom, so please remember to bring an ice-pack to keep lunches fresh through the morning. Available Food Options: Subway Qdoba Mexican Grill (as available) Starbucks Polytechnic Marketplace (convenience store) Students should bring their own snacks and a personal water bottle.","title":"Food, Water, Snacks"},{"location":"what-to-bring/#laptops-and-software","text":"We encourage students to bring their own laptop. We are able to support the following operating systems*: Windows Mac Linux *Unfortunately, chromebooks do not currently support the software and hardware we plan to use. If you are bringing a laptop, please ensure your student has the proper user permissions for installing new software on the laptop. Otherwise, please go ahead and install the following software in advance: Visual Studio Code Silabs cp210x driver (windows only) Tracker","title":"Laptops and Software"},{"location":"what-to-bring/#optional-software","text":"Miniconda CreateSpace There are also a number of PCs in the classroom that will be available.","title":"Optional Software"},{"location":"modules/","text":"Tentative Lesson Plan Monday Tuesday Wednesday Thursday Friday Topic 1 Origami & Folding Microcontrollers, Programming Vinyl Cutters, Manufacturing Making Session Final Build Topic 2 Making Session Circuits & Sensors Making Session Integration Final Integration Topic 3 Biomechanics & Bioinspiration Motors & Servos Tech Building Lab Tour ESP32 Programming Internal Presentations Topic 4 Making Session Body Module Prototyping Experimentation, Data Collection Advanced Control Parent Showcase (3:00-4:00)","title":"Lesson Plan"},{"location":"modules/#tentative-lesson-plan","text":"Monday Tuesday Wednesday Thursday Friday Topic 1 Origami & Folding Microcontrollers, Programming Vinyl Cutters, Manufacturing Making Session Final Build Topic 2 Making Session Circuits & Sensors Making Session Integration Final Integration Topic 3 Biomechanics & Bioinspiration Motors & Servos Tech Building Lab Tour ESP32 Programming Internal Presentations Topic 4 Making Session Body Module Prototyping Experimentation, Data Collection Advanced Control Parent Showcase (3:00-4:00)","title":"Tentative Lesson Plan"},{"location":"modules/01-foldable-mechanisms/","text":"--- 02-foldable-mechanisms.md Foldable Mechanisms Group Roles Leader - Responsible for organizing resources, helping design the robot, maintaining a positive group dynamic by making sure everyone is heard and respected, enforcing rules (be respect yourself, each other, and this place), create presentation for the final project using all group members work. Coder - Responsible for coding the microcontrollers, servos, and sensors. Responding to group feedback and input. Requires a laptop. Builder - Responsible for assembling the robot using the mechanisms, linkages, and joints demonstrated in class. Responding to group feedback and input. NOTE: throughout the camp, each person may function as multiple roles, so the challenge will be doing what needs to be done without getting in each other's way by COMMUNICATING EFFECTIVELY (use I statements - I think, I feel, I wonder) :-) Keywords Mechanism Link Linkage Joint Degrees of Freedom NOTE: As we move through the slides, consider everyday applications. We will use the following concepts to make a pop up book that demonstrates the functionality of each mechanism and linkage. Activity Find an example of a simple, or complicated pop up book. Once you have found one, provide the link in the text box on your screen and be prepared to discuss the types of linkages, mechanisms, and joints demonstrated by your example. Step 1 Activity Get out construction paper, scissors, staplers, etc Create at least one flip book page using any combination of mechanisms. As a team combine your pages into one book. Step 2 Why are we talking about foldable mechanisms? Robots are mechanisms, or machines. Serial vs. Parallel Composed of links and joints Mechanisms A system of parts working together in a machine; a piece of machinery. https://en.wikipedia.org/wiki/Mechanism_(engineering) https://languages.oup.com/google-dictionary-en/ Serial Mechanisms CNX OpenStax, CC BY 4.0, via Wikimedia Commons A serial mechanism, also known as a serial chain or serial linkage, refers to a mechanical system in which components or links are arranged in a linear sequence, with each component connected to the one before and after it. The output motion or force is transmitted through each link in a sequential manner from the input to the final output. In a serial mechanism, the motion or force is transmitted through a series of interconnected links or elements, typically connected by joints or hinges. Each link is responsible for transmitting or transforming the input motion or force to the next link in the chain, until it reaches the final output. Parallel Mechanism In kinematics, a parallel mechanism refers to a mechanical system consisting of multiple interconnected links that are connected in a way that allows them to move simultaneously and independently of each other. These links are arranged in a parallel configuration, meaning they share a common base and have multiple end-effectors. To understand this concept, let's use an example of a parallel robot called a Delta robot. A Delta robot consists of three parallel arms connected to a base and a common platform, which acts as the end-effector. Each arm has multiple joints that allow it to move in various directions. Degrees of Freedom In the context of motion and mechanics, degrees of freedom refer to the number of independent ways an object or system can move. It represents the different directions or types of motion that an object is capable of. To understand degrees of freedom, let's consider a simple example: a point particle in space. A point particle can move freely in three dimensions: forward and backward (along the x-axis), left and right (along the y-axis), and up and down (along the z-axis). In this case, the point particle has three degrees of freedom. How many degrees of freedom are represented in this gif? Degrees of Freedom Continued \u201cThe number of independent parameters that define its configuration or state\u201d The position of a single railcar (engine) moving along a track has one degree of freedom Position and orientation of a rigid body in space is defined by three components of translation and three components of rotation, which means that it has six degrees of freedom. https://en.wikipedia.org/wiki/Degrees_of_freedom_(mechanics) Kinematic Structures Kinematic structure refers to the arrangement and configuration of links, joints, and degrees of freedom in a mechanical system or mechanism. It provides a description of how the components are connected and how they allow or restrict motion. In a mechanical system, the kinematic structure defines the overall shape, connectivity, and relative motion of the components. It specifies the arrangement of links (rigid bodies) and the types of joints (points of connection) between them. Link An intermediate rod or piece for transmitting force or motion; especially, a short connecting rod with a hole or pin at each end. Joints In robotics, joints are the connections between rigid bodies which facilitate motion Many different kinds of joints with different degrees of freedom Folded devices use systems of joints Flores, Paulo & Lankarani, Hamid. (2016). Contact Force Models for Multibody Dynamics. Linkage In kinematics, a linkage refers to a system of rigid bodies connected by joints or links that allow relative motion between them. Linkages are used to transmit and control motion or force in mechanical systems. https://en.wikipedia.org/wiki/Linkage_(mechanical)\\ More Complex Joints Chase, Kenneth & Magleby, Spencer & Glancy, Charles. (2000). A Comprehensive System for Computer-Aided Tolerance Analysis of 2-D and 3-D Mechanical Assemblies. 10.1007/978-1-4615-5797-5_23. Joints https://24.media.tumblr.com/tumblr_mck6ejg15N1r0v3zro3_1280.jpg Origami vs. Kirigami https://www.youtube.com/watch?v=kUsxMXwCW8A Origami: Less about mechanisms and more about \u201cstructures\u201d or \u201cform\u201d \u201cFoldable\u201d Links How can you stiffen material to create a better link? \u2026 \u2026 \u2026 \u201cFoldable\u201d Links How can you stiffen material to create a better link? \u2026 \u2026 \u2026 Engineering Context: I-beams \u201cFoldable\u201d Joints What joints can you make with origami/kirigami techniques? How can you weaken material to create a better joint? \u2026 \u2026 \u2026 Identical mechanisms, many ways to get there Four-Bar Linkage Example Sarrus Example Types of Linkages Planar four-bar five-bar six-bar \u2026 Spherical four-bar five-bar six-bar \u2026 Other: Sarrus Straight-line Slider-Crank More Info https://en.wikipedia.org/wiki/Linkage_(mechanical)#Image_gallery https://engineering.library.cornell.edu/kmoddl/","title":"Index"},{"location":"modules/01-foldable-mechanisms/#-","text":"","title":"---"},{"location":"modules/01-foldable-mechanisms/#02-foldable-mechanismsmd","text":"","title":"02-foldable-mechanisms.md"},{"location":"modules/01-foldable-mechanisms/#foldable-mechanisms","text":"","title":"Foldable Mechanisms"},{"location":"modules/01-foldable-mechanisms/#group-roles","text":"Leader - Responsible for organizing resources, helping design the robot, maintaining a positive group dynamic by making sure everyone is heard and respected, enforcing rules (be respect yourself, each other, and this place), create presentation for the final project using all group members work. Coder - Responsible for coding the microcontrollers, servos, and sensors. Responding to group feedback and input. Requires a laptop. Builder - Responsible for assembling the robot using the mechanisms, linkages, and joints demonstrated in class. Responding to group feedback and input. NOTE: throughout the camp, each person may function as multiple roles, so the challenge will be doing what needs to be done without getting in each other's way by COMMUNICATING EFFECTIVELY (use I statements - I think, I feel, I wonder) :-)","title":"Group Roles"},{"location":"modules/01-foldable-mechanisms/#keywords","text":"Mechanism Link Linkage Joint Degrees of Freedom NOTE: As we move through the slides, consider everyday applications. We will use the following concepts to make a pop up book that demonstrates the functionality of each mechanism and linkage.","title":"Keywords"},{"location":"modules/01-foldable-mechanisms/#activity","text":"Find an example of a simple, or complicated pop up book. Once you have found one, provide the link in the text box on your screen and be prepared to discuss the types of linkages, mechanisms, and joints demonstrated by your example. Step 1","title":"Activity"},{"location":"modules/01-foldable-mechanisms/#activity_1","text":"Get out construction paper, scissors, staplers, etc Create at least one flip book page using any combination of mechanisms. As a team combine your pages into one book. Step 2","title":"Activity"},{"location":"modules/01-foldable-mechanisms/#why-are-we-talking-about-foldable-mechanisms","text":"Robots are mechanisms, or machines. Serial vs. Parallel Composed of links and joints","title":"Why are we talking about foldable mechanisms?"},{"location":"modules/01-foldable-mechanisms/#mechanisms","text":"A system of parts working together in a machine; a piece of machinery. https://en.wikipedia.org/wiki/Mechanism_(engineering) https://languages.oup.com/google-dictionary-en/","title":"Mechanisms"},{"location":"modules/01-foldable-mechanisms/#serial-mechanisms","text":"CNX OpenStax, CC BY 4.0, via Wikimedia Commons A serial mechanism, also known as a serial chain or serial linkage, refers to a mechanical system in which components or links are arranged in a linear sequence, with each component connected to the one before and after it. The output motion or force is transmitted through each link in a sequential manner from the input to the final output. In a serial mechanism, the motion or force is transmitted through a series of interconnected links or elements, typically connected by joints or hinges. Each link is responsible for transmitting or transforming the input motion or force to the next link in the chain, until it reaches the final output.","title":"Serial Mechanisms"},{"location":"modules/01-foldable-mechanisms/#parallel-mechanism","text":"In kinematics, a parallel mechanism refers to a mechanical system consisting of multiple interconnected links that are connected in a way that allows them to move simultaneously and independently of each other. These links are arranged in a parallel configuration, meaning they share a common base and have multiple end-effectors. To understand this concept, let's use an example of a parallel robot called a Delta robot. A Delta robot consists of three parallel arms connected to a base and a common platform, which acts as the end-effector. Each arm has multiple joints that allow it to move in various directions.","title":"Parallel Mechanism"},{"location":"modules/01-foldable-mechanisms/#degrees-of-freedom","text":"In the context of motion and mechanics, degrees of freedom refer to the number of independent ways an object or system can move. It represents the different directions or types of motion that an object is capable of. To understand degrees of freedom, let's consider a simple example: a point particle in space. A point particle can move freely in three dimensions: forward and backward (along the x-axis), left and right (along the y-axis), and up and down (along the z-axis). In this case, the point particle has three degrees of freedom. How many degrees of freedom are represented in this gif?","title":"Degrees of Freedom"},{"location":"modules/01-foldable-mechanisms/#degrees-of-freedom-continued","text":"\u201cThe number of independent parameters that define its configuration or state\u201d The position of a single railcar (engine) moving along a track has one degree of freedom Position and orientation of a rigid body in space is defined by three components of translation and three components of rotation, which means that it has six degrees of freedom. https://en.wikipedia.org/wiki/Degrees_of_freedom_(mechanics)","title":"Degrees of Freedom Continued"},{"location":"modules/01-foldable-mechanisms/#kinematic-structures","text":"Kinematic structure refers to the arrangement and configuration of links, joints, and degrees of freedom in a mechanical system or mechanism. It provides a description of how the components are connected and how they allow or restrict motion. In a mechanical system, the kinematic structure defines the overall shape, connectivity, and relative motion of the components. It specifies the arrangement of links (rigid bodies) and the types of joints (points of connection) between them.","title":"Kinematic Structures"},{"location":"modules/01-foldable-mechanisms/#link","text":"An intermediate rod or piece for transmitting force or motion; especially, a short connecting rod with a hole or pin at each end.","title":"Link"},{"location":"modules/01-foldable-mechanisms/#joints","text":"In robotics, joints are the connections between rigid bodies which facilitate motion Many different kinds of joints with different degrees of freedom Folded devices use systems of joints Flores, Paulo & Lankarani, Hamid. (2016). Contact Force Models for Multibody Dynamics.","title":"Joints"},{"location":"modules/01-foldable-mechanisms/#linkage","text":"In kinematics, a linkage refers to a system of rigid bodies connected by joints or links that allow relative motion between them. Linkages are used to transmit and control motion or force in mechanical systems. https://en.wikipedia.org/wiki/Linkage_(mechanical)\\","title":"Linkage"},{"location":"modules/01-foldable-mechanisms/#more-complex-joints","text":"Chase, Kenneth & Magleby, Spencer & Glancy, Charles. (2000). A Comprehensive System for Computer-Aided Tolerance Analysis of 2-D and 3-D Mechanical Assemblies. 10.1007/978-1-4615-5797-5_23.","title":"More Complex Joints"},{"location":"modules/01-foldable-mechanisms/#joints_1","text":"https://24.media.tumblr.com/tumblr_mck6ejg15N1r0v3zro3_1280.jpg","title":"Joints"},{"location":"modules/01-foldable-mechanisms/#origami-vs-kirigami","text":"https://www.youtube.com/watch?v=kUsxMXwCW8A Origami: Less about mechanisms and more about \u201cstructures\u201d or \u201cform\u201d","title":"Origami vs. Kirigami"},{"location":"modules/01-foldable-mechanisms/#foldable-links","text":"How can you stiffen material to create a better link? \u2026 \u2026 \u2026","title":"\u201cFoldable\u201d Links"},{"location":"modules/01-foldable-mechanisms/#foldable-links_1","text":"How can you stiffen material to create a better link? \u2026 \u2026 \u2026 Engineering Context: I-beams","title":"\u201cFoldable\u201d Links"},{"location":"modules/01-foldable-mechanisms/#foldable-joints","text":"What joints can you make with origami/kirigami techniques? How can you weaken material to create a better joint? \u2026 \u2026 \u2026","title":"\u201cFoldable\u201d Joints"},{"location":"modules/01-foldable-mechanisms/#identical-mechanisms-many-ways-to-get-there","text":"Four-Bar Linkage Example Sarrus Example","title":"Identical mechanisms, many ways to get there"},{"location":"modules/01-foldable-mechanisms/#types-of-linkages","text":"Planar four-bar five-bar six-bar \u2026 Spherical four-bar five-bar six-bar \u2026 Other: Sarrus Straight-line Slider-Crank More Info https://en.wikipedia.org/wiki/Linkage_(mechanical)#Image_gallery https://engineering.library.cornell.edu/kmoddl/","title":"Types of Linkages"},{"location":"modules/02-biomechanics-and-bioinspiration/","text":"Taking a page from nature\u2019s book Key Terms Biomechanics Bio-inspiration Serial Mechanism Parallel Mechanism Servo Work Loop Inverted Pendulum Spring Loaded Pendulum Biomechanics Vs. Bio-Inspiration Biomechanics Biomechanics is a field of study that combines biology and physics to understand how living organisms, including humans and animals, move and interact with their environment. To put it simply, biomechanics helps us understand how our bodies work when we perform activities like walking, running, jumping, or throwing. It explores the forces, motions, and structures involved in these movements. Bio-inspiration Bio-inspiration, also known as biomimicry or biomimetics, is a concept that involves taking inspiration from nature and using it to solve human problems or create innovative designs and technologies. When we look at nature, we can find a wide variety of plants, animals, and organisms that have evolved over millions of years. They have developed unique adaptations, structures, and processes that allow them to survive and thrive in their environments. Complete the sentence below in your text box Robotic Systems help us understand the biological world by\u2026 Mimicking biological structures can\u2026 One benefit of Bio-inspiration is that experiments can be designed and repeated vs. observed. An example of this is\u2026 In bioinspiration, variation in form and function can be introduced because\u2026 The Human Skeleton - A (Branching) Serial Mechanism CNX OpenStax, CC BY 4.0, via Wikimedia Commons Serial Mechanism: Systems of consecutive movement - Joint A moves, then Joint B, then Joint C, and so on. Many human joints can be described by \u201cbasic\u201d joint types (e.g. ball and socket, hinge, saddle, pivot, and plane joints) Serial Mechanism Examples Consider the motion below - if you had one motor, where would you place that motor to drive the motion in either of these Serial mechanisms? Drag the star below to that point. Skeletons Can be Parallel Mechanisms Video * https://www.youtube.com/watch?v=pDU4CQWXaNY Westneat, M.W. (1990), Feeding mechanics of teleost fishes (Labridae; Perciformes): A test of four-bar linkage models. J. Morphol., 205: 269-295. https://doi.org/10.1002/jmor.1052050304 Parallel Mechanism In kinematics, a parallel mechanism refers to a mechanical system consisting of multiple interconnected links that are connected in a way that allows them to move simultaneously and independently of each other. These links are arranged in a parallel configuration, meaning they share a common base and have multiple end-effectors. To understand this concept, let's use an example of a parallel robot called a Delta robot. A Delta robot consists of three parallel arms connected to a base and a common platform, which acts as the end-effector. Each arm has multiple joints that allow it to move in various directions. Parallel Mechanism Examples Consider the motion below - if you had one motor, where would you place that motor to drive the entire parallel mechanism? Drag the star below to that point. Arthropod Joints From Barnes, R. D. 1964. Invertebrate Zoology. W. B. Saunders. Philadelphia. Found here Arthropod Joints Different Joint types, different degrees of freedom Wootton, Robert J.. \u201cInvertebrate paraxial locomotory appendages: design, deformation and control.\u201d The Journal of experimental biology 202 Pt 23 (1999): 3333-45 . Skeletal Muscle https://open.oregonstate.education/aandp/chapter/10-2-skeletal-muscle/ Anatomy & Physiology by Lindsay M. Biga, Sierra Dawson, Amy Harwell, Robin Hopkins, Joel Kaufmann, Mike LeMaster, Philip Matern, Katie Morrison-Graham, Devon Quick & Jon Runyeon is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License, except where otherwise noted. How can a servo stimulate muscle contraction? Skeletal Muscle Examples Supination - When your palm or forearm faces up Pronation -When your palm or forearm faces down Muscles can do Different things Roberts, T. J., & Azizi, E. (2011). Flexible mechanisms: the diverse roles of biological springs in vertebrate movement. Journal of Experimental Biology, 214(3), 353\u2013361. https://doi.org/10.1242/jeb.038588 Work Loop In kinematics, we study the motion of objects and how they change their position over time. When we talk about work, we are referring to the effort or energy required to move an object. Now, imagine you have a ball and you want to move it from one point to another. In order to do that, you have to apply a force to the ball. The force you apply to the ball makes it move. The work you do on the ball is the energy you spend to make it move. A work loop is a way to visualize and understand the work done on an object as it moves through a closed path or loop. It helps us understand how energy is transferred to the object and how it changes its position. https://en.wikipedia.org/wiki/Work_loop Force relationship to the work loop of Skeletal Muscle Isometric force occurs when you exert force against an object that doesn't move, or when you resist a force without changing the length of your muscles. For example, pushing against a wall with all your strength or holding a weight in a fixed position without moving it are both examples of generating isometric force. Biewener, Andrew & Gillis, Gary. (2000). Dynamics of muscle function during locomotion: Accommodating variable conditions. The Journal of experimental biology. 202. 3387-96. 10.1242/jeb.202.23.3387. Inverted Pendulum vs Spring-Loaded Inverted Pendulum The Inverted Pendulum An inverted pendulum refers to a system where a rigid rod or pole is balanced in an inverted, or upside-down, position. Unlike a regular pendulum that hangs downward, an inverted pendulum is positioned with its base or pivot point above its center of mass. The inverted pendulum is an interesting and challenging system to study in kinematics and control theory because it requires active control to maintain its balance. Without any control, the inverted pendulum would fall due to the unstable nature of its equilibrium position. The Spring-Loaded Pendulum The Spring-Loaded Pendulum consists of a mass (often represented by a bob or weight) attached to a rigid rod or string, forming a pendulum. In addition to the gravitational force acting on the mass, there is a spring attached to the pendulum that exerts a force proportional to the displacement of the mass from its equilibrium position. When the Spring-Loaded Pendulum is displaced from its equilibrium position, the spring exerts a restoring force that brings the pendulum back towards its equilibrium. As the pendulum moves towards the equilibrium, the spring compresses or stretches, storing potential energy. Real World Examples Reference Robots Refer to the following slides for inspiration. Pay attention to the motion over time, and imagine the energy and forces within the work loop. Things to consider: Range of Motion Weight/ Distribution of Weight Attachment/ anchor points Serial vs. Parallel Mechanisms Types of Joints Passive Dynamic Walker Video SLIP Legs Video Implementations of SLIP A. Sprowitz, A. Tuleu, M. Vespignani, M. Ajallooeian, E. Badri, and A. J. Ijspeert, \u201cTowards dynamic trot gait locomotion: Design, control, and experiments with Cheetah-cub, a compliant quadruped robot,\u201d Int. J. Rob. Res., vol. 32, no. 8, pp. 932\u2013950, Jul. 2013. Video Video Cheetah Cub Video MIT Cheetah Video Different Animals M. H. Dickinson, \u201cHow Animals Move: An Integrative View,\u201d Science (80-. )., vol. 288, no. 5463, pp. 100\u2013106, Apr. 2000. Peristaltic Locomotion Mechanics of peristaltic locomotion and role of anchoringJ. R. Soc. Interface.9222\u2013233http://doi.org/10.1098/rsif.2011.0339 Peristaltic Video Undulatory Video Swimming In Sand Video Climbing with Stickybot Video Foldable-Compatible Legged Already Foldable Dash HAMR DynaROACH Non-Foldable ATRIAS/Cassie Penn Jerboa Stanford Doggo HAMR Video DASH Video ATRIAS Family ATRIAS / CASSIE Video","title":"Biomechanics and Bioinspiration"},{"location":"modules/02-biomechanics-and-bioinspiration/#key-terms","text":"Biomechanics Bio-inspiration Serial Mechanism Parallel Mechanism Servo Work Loop Inverted Pendulum Spring Loaded Pendulum","title":"Key Terms"},{"location":"modules/02-biomechanics-and-bioinspiration/#biomechanics-vs-bio-inspiration","text":"Biomechanics Biomechanics is a field of study that combines biology and physics to understand how living organisms, including humans and animals, move and interact with their environment. To put it simply, biomechanics helps us understand how our bodies work when we perform activities like walking, running, jumping, or throwing. It explores the forces, motions, and structures involved in these movements. Bio-inspiration Bio-inspiration, also known as biomimicry or biomimetics, is a concept that involves taking inspiration from nature and using it to solve human problems or create innovative designs and technologies. When we look at nature, we can find a wide variety of plants, animals, and organisms that have evolved over millions of years. They have developed unique adaptations, structures, and processes that allow them to survive and thrive in their environments.","title":"Biomechanics Vs. Bio-Inspiration"},{"location":"modules/02-biomechanics-and-bioinspiration/#complete-the-sentence-below-in-your-text-box","text":"Robotic Systems help us understand the biological world by\u2026 Mimicking biological structures can\u2026 One benefit of Bio-inspiration is that experiments can be designed and repeated vs. observed. An example of this is\u2026 In bioinspiration, variation in form and function can be introduced because\u2026","title":"Complete the sentence below in your text box"},{"location":"modules/02-biomechanics-and-bioinspiration/#the-human-skeleton-a-branching-serial-mechanism","text":"CNX OpenStax, CC BY 4.0, via Wikimedia Commons Serial Mechanism: Systems of consecutive movement - Joint A moves, then Joint B, then Joint C, and so on. Many human joints can be described by \u201cbasic\u201d joint types (e.g. ball and socket, hinge, saddle, pivot, and plane joints)","title":"The Human Skeleton - A (Branching) Serial Mechanism"},{"location":"modules/02-biomechanics-and-bioinspiration/#serial-mechanism-examples","text":"Consider the motion below - if you had one motor, where would you place that motor to drive the motion in either of these Serial mechanisms? Drag the star below to that point.","title":"Serial Mechanism Examples"},{"location":"modules/02-biomechanics-and-bioinspiration/#skeletons-can-be-parallel-mechanisms","text":"Video * https://www.youtube.com/watch?v=pDU4CQWXaNY Westneat, M.W. (1990), Feeding mechanics of teleost fishes (Labridae; Perciformes): A test of four-bar linkage models. J. Morphol., 205: 269-295. https://doi.org/10.1002/jmor.1052050304","title":"Skeletons Can be Parallel Mechanisms"},{"location":"modules/02-biomechanics-and-bioinspiration/#parallel-mechanism","text":"In kinematics, a parallel mechanism refers to a mechanical system consisting of multiple interconnected links that are connected in a way that allows them to move simultaneously and independently of each other. These links are arranged in a parallel configuration, meaning they share a common base and have multiple end-effectors. To understand this concept, let's use an example of a parallel robot called a Delta robot. A Delta robot consists of three parallel arms connected to a base and a common platform, which acts as the end-effector. Each arm has multiple joints that allow it to move in various directions.","title":"Parallel Mechanism"},{"location":"modules/02-biomechanics-and-bioinspiration/#parallel-mechanism-examples","text":"Consider the motion below - if you had one motor, where would you place that motor to drive the entire parallel mechanism? Drag the star below to that point.","title":"Parallel Mechanism Examples"},{"location":"modules/02-biomechanics-and-bioinspiration/#arthropod-joints","text":"From Barnes, R. D. 1964. Invertebrate Zoology. W. B. Saunders. Philadelphia. Found here","title":"Arthropod Joints"},{"location":"modules/02-biomechanics-and-bioinspiration/#arthropod-joints_1","text":"Different Joint types, different degrees of freedom Wootton, Robert J.. \u201cInvertebrate paraxial locomotory appendages: design, deformation and control.\u201d The Journal of experimental biology 202 Pt 23 (1999): 3333-45 .","title":"Arthropod Joints"},{"location":"modules/02-biomechanics-and-bioinspiration/#skeletal-muscle","text":"https://open.oregonstate.education/aandp/chapter/10-2-skeletal-muscle/ Anatomy & Physiology by Lindsay M. Biga, Sierra Dawson, Amy Harwell, Robin Hopkins, Joel Kaufmann, Mike LeMaster, Philip Matern, Katie Morrison-Graham, Devon Quick & Jon Runyeon is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License, except where otherwise noted.","title":"Skeletal Muscle"},{"location":"modules/02-biomechanics-and-bioinspiration/#how-can-a-servo-stimulate-muscle-contraction","text":"","title":"How can a servo stimulate muscle contraction?"},{"location":"modules/02-biomechanics-and-bioinspiration/#skeletal-muscle-examples","text":"Supination - When your palm or forearm faces up Pronation -When your palm or forearm faces down","title":"Skeletal Muscle Examples"},{"location":"modules/02-biomechanics-and-bioinspiration/#muscles-can-do-different-things","text":"Roberts, T. J., & Azizi, E. (2011). Flexible mechanisms: the diverse roles of biological springs in vertebrate movement. Journal of Experimental Biology, 214(3), 353\u2013361. https://doi.org/10.1242/jeb.038588","title":"Muscles can do Different things"},{"location":"modules/02-biomechanics-and-bioinspiration/#work-loop","text":"In kinematics, we study the motion of objects and how they change their position over time. When we talk about work, we are referring to the effort or energy required to move an object. Now, imagine you have a ball and you want to move it from one point to another. In order to do that, you have to apply a force to the ball. The force you apply to the ball makes it move. The work you do on the ball is the energy you spend to make it move. A work loop is a way to visualize and understand the work done on an object as it moves through a closed path or loop. It helps us understand how energy is transferred to the object and how it changes its position. https://en.wikipedia.org/wiki/Work_loop","title":"Work Loop"},{"location":"modules/02-biomechanics-and-bioinspiration/#force-relationship-to-the-work-loop-of-skeletal-muscle","text":"Isometric force occurs when you exert force against an object that doesn't move, or when you resist a force without changing the length of your muscles. For example, pushing against a wall with all your strength or holding a weight in a fixed position without moving it are both examples of generating isometric force. Biewener, Andrew & Gillis, Gary. (2000). Dynamics of muscle function during locomotion: Accommodating variable conditions. The Journal of experimental biology. 202. 3387-96. 10.1242/jeb.202.23.3387.","title":"Force relationship to the work loop of Skeletal Muscle"},{"location":"modules/02-biomechanics-and-bioinspiration/#inverted-pendulum-vs-spring-loaded-inverted-pendulum","text":"","title":"Inverted Pendulum vs Spring-Loaded Inverted Pendulum"},{"location":"modules/02-biomechanics-and-bioinspiration/#the-inverted-pendulum","text":"An inverted pendulum refers to a system where a rigid rod or pole is balanced in an inverted, or upside-down, position. Unlike a regular pendulum that hangs downward, an inverted pendulum is positioned with its base or pivot point above its center of mass. The inverted pendulum is an interesting and challenging system to study in kinematics and control theory because it requires active control to maintain its balance. Without any control, the inverted pendulum would fall due to the unstable nature of its equilibrium position.","title":"The Inverted Pendulum"},{"location":"modules/02-biomechanics-and-bioinspiration/#the-spring-loaded-pendulum","text":"The Spring-Loaded Pendulum consists of a mass (often represented by a bob or weight) attached to a rigid rod or string, forming a pendulum. In addition to the gravitational force acting on the mass, there is a spring attached to the pendulum that exerts a force proportional to the displacement of the mass from its equilibrium position. When the Spring-Loaded Pendulum is displaced from its equilibrium position, the spring exerts a restoring force that brings the pendulum back towards its equilibrium. As the pendulum moves towards the equilibrium, the spring compresses or stretches, storing potential energy.","title":"The Spring-Loaded Pendulum"},{"location":"modules/02-biomechanics-and-bioinspiration/#real-world-examples","text":"Reference Robots Refer to the following slides for inspiration. Pay attention to the motion over time, and imagine the energy and forces within the work loop. Things to consider: Range of Motion Weight/ Distribution of Weight Attachment/ anchor points Serial vs. Parallel Mechanisms Types of Joints","title":"Real World Examples"},{"location":"modules/02-biomechanics-and-bioinspiration/#passive-dynamic-walker","text":"Video","title":"Passive Dynamic Walker"},{"location":"modules/02-biomechanics-and-bioinspiration/#slip-legs","text":"Video","title":"SLIP Legs"},{"location":"modules/02-biomechanics-and-bioinspiration/#implementations-of-slip","text":"A. Sprowitz, A. Tuleu, M. Vespignani, M. Ajallooeian, E. Badri, and A. J. Ijspeert, \u201cTowards dynamic trot gait locomotion: Design, control, and experiments with Cheetah-cub, a compliant quadruped robot,\u201d Int. J. Rob. Res., vol. 32, no. 8, pp. 932\u2013950, Jul. 2013.","title":"Implementations of SLIP"},{"location":"modules/02-biomechanics-and-bioinspiration/#_1","text":"Video","title":""},{"location":"modules/02-biomechanics-and-bioinspiration/#_2","text":"Video","title":""},{"location":"modules/02-biomechanics-and-bioinspiration/#cheetah-cub","text":"Video","title":"Cheetah Cub"},{"location":"modules/02-biomechanics-and-bioinspiration/#mit-cheetah","text":"Video","title":"MIT Cheetah"},{"location":"modules/02-biomechanics-and-bioinspiration/#different-animals","text":"M. H. Dickinson, \u201cHow Animals Move: An Integrative View,\u201d Science (80-. )., vol. 288, no. 5463, pp. 100\u2013106, Apr. 2000.","title":"Different Animals"},{"location":"modules/02-biomechanics-and-bioinspiration/#peristaltic-locomotion","text":"Mechanics of peristaltic locomotion and role of anchoringJ. R. Soc. Interface.9222\u2013233http://doi.org/10.1098/rsif.2011.0339","title":"Peristaltic Locomotion"},{"location":"modules/02-biomechanics-and-bioinspiration/#peristaltic","text":"Video","title":"Peristaltic"},{"location":"modules/02-biomechanics-and-bioinspiration/#undulatory","text":"Video","title":"Undulatory"},{"location":"modules/02-biomechanics-and-bioinspiration/#swimming-in-sand","text":"Video","title":"Swimming In Sand"},{"location":"modules/02-biomechanics-and-bioinspiration/#climbing-with-stickybot","text":"Video","title":"Climbing with Stickybot"},{"location":"modules/02-biomechanics-and-bioinspiration/#foldable-compatible-legged","text":"Already Foldable Dash HAMR DynaROACH Non-Foldable ATRIAS/Cassie Penn Jerboa Stanford Doggo","title":"Foldable-Compatible Legged"},{"location":"modules/02-biomechanics-and-bioinspiration/#hamr","text":"Video","title":"HAMR"},{"location":"modules/02-biomechanics-and-bioinspiration/#dash","text":"Video","title":"DASH"},{"location":"modules/02-biomechanics-and-bioinspiration/#atrias-family","text":"","title":"ATRIAS Family"},{"location":"modules/02-biomechanics-and-bioinspiration/#atrias-cassie","text":"Video","title":"ATRIAS / CASSIE"},{"location":"modules/03-esp32/other-resources/","text":"OLED Tutorial: https://randomnerdtutorials.com/micropython-oled-display-esp32-esp8266/","title":"Other Resources"},{"location":"modules/03-esp32/esp32-concepts/","text":"Overview of the ESP32 DevKit DOIT V1 Pinouts / Schematics from https://randomnerdtutorials.com/getting-started-with-esp32/ Board Layout Mount your ESP32 on your Breadboard ESP32 Links Espressif ESP32-WROOM-32 Datasheet ESP32-Devkit-C Page Devkit Technical Documents External Pinout Resources https://johnmu.com/picking-esp32-dev-board/ https://www.etechnophiles.com/esp32-dev-board-pinout-specifications-datasheet-and-schematic/ https://www.studiopieters.nl/esp32-pinout/ MicroPython Intro What is Python? Easy to learn programming language Interpreted Language - write code and have it execute without compiling! Simple formatting: mostly spaces, few extraneous characters, similar basic keywords as other languages, easy access to complex data types An extensible system of software \u201cpackages\u201d use pip/pypi to install install straight from github! as of March 2022, tiobe.com Is there anything else? \u201cDynamically Typed\u201d Variables don\u2019t need to be declared as one type or another. You simply set them equal to something and they become that data type. Object-oriented concept of classes and inheritance \u201cPublic\u201d by definition data is not easily hidden. data is accessible by anything What is MicroPython? A slimmed down, limited version of Python that fits within the program space of a little microcontroller The system of software packages written for it The same idea of an interpreter\u2026 you just access it over USB. What is VSCode? A powerful code editor Plugins for communicating to your device Python Interpreter Simple program that runs scripts or typed commands. A lot like bash, powershell, or cmd, only cross-platform and independent of the operating system. Ok, so how do I get started? Install Miniconda Get ESP32 Working Install Thonny Packages Install USB Device Drivers Flash the ESP32 with MicroPython over USB Start writing code\u2026 Working With Thonny See this Tutorial Python Tutorials Basic Data Types Advanced Data Types Operators and Operations Conditional Statements (If-then) Loops (For/While) Functions Classes First ESP32 Program from machine import Pin from time import sleep led = Pin(2, Pin.OUT) while True: led.value(1) sleep(1) led.value(0) sleep(1) Read ADC from machine import Pin, ADC from time import sleep pot = ADC(Pin(34)) pot.atten(ADC.ATTN_11DB) #Full range: 3.3v while True: pot_value = pot.read() print(pot_value) sleep(0.1) ESP32 Wifi Access Point and Web Server # Combination of the following tutorials: # https://randomnerdtutorials.com/esp32-esp8266-micropython-web-server/ # https://randomnerdtutorials.com/micropython-esp32-esp8266-access-point-ap/ try: import usocket as socket except: import socket import network import esp esp.osdebug(None) ssid = 'MicroPython-AP-Dan' password = '123456789' ap = network.WLAN(network.AP_IF) ap.active(True) ap.config(essid=ssid, password=password) while ap.active() == False: pass print('Connection successful') print(ap.ifconfig()) from machine import Pin led = Pin(2, Pin.OUT) def web_page(): if led.value() == 1: gpio_state=\"ON\" else: gpio_state=\"OFF\" html = \"\"\"<html><head> <title>ESP Web Server</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"icon\" href=\"data:,\"> <style>html{font-family: Helvetica; display:inline-block; margin: 0px auto; text-align: center;} h1{color: #0F3376; padding: 2vh;}p{font-size: 1.5rem;}.button{display: inline-block; background-color: #e7bd3b; border: none; border-radius: 4px; color: white; padding: 16px 40px; text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;} .button2{background-color: #4286f4;}</style></head><body> <h1>ESP Web Server</h1> <p>GPIO state: <strong>\"\"\" + gpio_state + \"\"\"</strong></p><p><a href=\"/?led=on\"><button class=\"button\">ON</button></a></p> <p><a href=\"/?led=off\"><button class=\"button button2\">OFF</button></a></p></body></html>\"\"\" return html s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', 80)) s.listen(5) while True: conn, addr = s.accept() print('Got a connection from %s' % str(addr)) request = conn.recv(1024) request = str(request) print('Content = %s' % request) led_on = request.find('/?led=on') led_off = request.find('/?led=off') if led_on == 6: print('LED ON') led.value(1) if led_off == 6: print('LED OFF') led.value(0) response = web_page() conn.send('HTTP/1.1 200 OK\\n') conn.send('Content-Type: text/html\\n') conn.send('Connection: close\\n\\n') conn.sendall(response) conn.close() Analog Sensor Reading from machine import Pin, ADC from time import sleep pot = ADC(Pin(34)) pot.atten(ADC.ATTN_11DB) #Full range: 3.3v while True: pot_value = pot.read() print(pot_value) sleep(0.1) MicroPython / ESP32 Resources MicroPython for ESP32 firmware download page ESP32 Micropython Documentation quickref Asynchronous micropython-based MQTT repository","title":"ESP32 and MicroPython"},{"location":"modules/03-esp32/esp32-concepts/#overview-of-the-esp32-devkit-doit-v1","text":"","title":"Overview of the ESP32 DevKit DOIT V1"},{"location":"modules/03-esp32/esp32-concepts/#pinouts-schematics","text":"from https://randomnerdtutorials.com/getting-started-with-esp32/","title":"Pinouts / Schematics"},{"location":"modules/03-esp32/esp32-concepts/#board-layout","text":"","title":"Board Layout"},{"location":"modules/03-esp32/esp32-concepts/#mount-your-esp32-on-your-breadboard","text":"","title":"Mount your ESP32 on your Breadboard"},{"location":"modules/03-esp32/esp32-concepts/#esp32-links","text":"Espressif ESP32-WROOM-32 Datasheet ESP32-Devkit-C Page Devkit Technical Documents External Pinout Resources https://johnmu.com/picking-esp32-dev-board/ https://www.etechnophiles.com/esp32-dev-board-pinout-specifications-datasheet-and-schematic/ https://www.studiopieters.nl/esp32-pinout/","title":"ESP32 Links"},{"location":"modules/03-esp32/esp32-concepts/#micropython-intro","text":"","title":"MicroPython Intro"},{"location":"modules/03-esp32/esp32-concepts/#what-is-python","text":"Easy to learn programming language Interpreted Language - write code and have it execute without compiling! Simple formatting: mostly spaces, few extraneous characters, similar basic keywords as other languages, easy access to complex data types An extensible system of software \u201cpackages\u201d use pip/pypi to install install straight from github! as of March 2022, tiobe.com","title":"What is Python?"},{"location":"modules/03-esp32/esp32-concepts/#is-there-anything-else","text":"\u201cDynamically Typed\u201d Variables don\u2019t need to be declared as one type or another. You simply set them equal to something and they become that data type. Object-oriented concept of classes and inheritance \u201cPublic\u201d by definition data is not easily hidden. data is accessible by anything","title":"Is there anything else?"},{"location":"modules/03-esp32/esp32-concepts/#what-is-micropython","text":"A slimmed down, limited version of Python that fits within the program space of a little microcontroller The system of software packages written for it The same idea of an interpreter\u2026 you just access it over USB.","title":"What is MicroPython?"},{"location":"modules/03-esp32/esp32-concepts/#what-is-vscode","text":"A powerful code editor Plugins for communicating to your device","title":"What is VSCode?"},{"location":"modules/03-esp32/esp32-concepts/#python-interpreter","text":"Simple program that runs scripts or typed commands. A lot like bash, powershell, or cmd, only cross-platform and independent of the operating system.","title":"Python Interpreter"},{"location":"modules/03-esp32/esp32-concepts/#ok-so-how-do-i-get-started","text":"Install Miniconda Get ESP32 Working Install Thonny Packages Install USB Device Drivers Flash the ESP32 with MicroPython over USB Start writing code\u2026","title":"Ok, so how do I get started?"},{"location":"modules/03-esp32/esp32-concepts/#working-with-thonny","text":"See this Tutorial","title":"Working With Thonny"},{"location":"modules/03-esp32/esp32-concepts/#python-tutorials","text":"Basic Data Types Advanced Data Types Operators and Operations Conditional Statements (If-then) Loops (For/While) Functions Classes","title":"Python Tutorials"},{"location":"modules/03-esp32/esp32-concepts/#first-esp32-program","text":"from machine import Pin from time import sleep led = Pin(2, Pin.OUT) while True: led.value(1) sleep(1) led.value(0) sleep(1)","title":"First ESP32 Program"},{"location":"modules/03-esp32/esp32-concepts/#read-adc","text":"from machine import Pin, ADC from time import sleep pot = ADC(Pin(34)) pot.atten(ADC.ATTN_11DB) #Full range: 3.3v while True: pot_value = pot.read() print(pot_value) sleep(0.1)","title":"Read ADC"},{"location":"modules/03-esp32/esp32-concepts/#esp32-wifi-access-point-and-web-server","text":"# Combination of the following tutorials: # https://randomnerdtutorials.com/esp32-esp8266-micropython-web-server/ # https://randomnerdtutorials.com/micropython-esp32-esp8266-access-point-ap/ try: import usocket as socket except: import socket import network import esp esp.osdebug(None) ssid = 'MicroPython-AP-Dan' password = '123456789' ap = network.WLAN(network.AP_IF) ap.active(True) ap.config(essid=ssid, password=password) while ap.active() == False: pass print('Connection successful') print(ap.ifconfig()) from machine import Pin led = Pin(2, Pin.OUT) def web_page(): if led.value() == 1: gpio_state=\"ON\" else: gpio_state=\"OFF\" html = \"\"\"<html><head> <title>ESP Web Server</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"icon\" href=\"data:,\"> <style>html{font-family: Helvetica; display:inline-block; margin: 0px auto; text-align: center;} h1{color: #0F3376; padding: 2vh;}p{font-size: 1.5rem;}.button{display: inline-block; background-color: #e7bd3b; border: none; border-radius: 4px; color: white; padding: 16px 40px; text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;} .button2{background-color: #4286f4;}</style></head><body> <h1>ESP Web Server</h1> <p>GPIO state: <strong>\"\"\" + gpio_state + \"\"\"</strong></p><p><a href=\"/?led=on\"><button class=\"button\">ON</button></a></p> <p><a href=\"/?led=off\"><button class=\"button button2\">OFF</button></a></p></body></html>\"\"\" return html s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', 80)) s.listen(5) while True: conn, addr = s.accept() print('Got a connection from %s' % str(addr)) request = conn.recv(1024) request = str(request) print('Content = %s' % request) led_on = request.find('/?led=on') led_off = request.find('/?led=off') if led_on == 6: print('LED ON') led.value(1) if led_off == 6: print('LED OFF') led.value(0) response = web_page() conn.send('HTTP/1.1 200 OK\\n') conn.send('Content-Type: text/html\\n') conn.send('Connection: close\\n\\n') conn.sendall(response) conn.close()","title":"ESP32 Wifi Access Point and Web Server"},{"location":"modules/03-esp32/esp32-concepts/#analog-sensor-reading","text":"from machine import Pin, ADC from time import sleep pot = ADC(Pin(34)) pot.atten(ADC.ATTN_11DB) #Full range: 3.3v while True: pot_value = pot.read() print(pot_value) sleep(0.1)","title":"Analog Sensor Reading"},{"location":"modules/03-esp32/esp32-concepts/#micropython-esp32-resources","text":"MicroPython for ESP32 firmware download page ESP32 Micropython Documentation quickref Asynchronous micropython-based MQTT repository","title":"MicroPython / ESP32 Resources"},{"location":"modules/03-esp32/esp32-installation-and-setup/","tags":["esp32","python","micropython","thonny"],"text":"Install Miniconda and packages You need to use Python on your PC to program the ESP32. install miniconda ( win64 quick link ). Follow this tutorial for detailed instructions. Installing Thonny and other Packages: Open up powershell (win+x, i) and type conda install -c conda-forge wrapt type pip install esptool thonny Note: on Mac, open up terminal or xterm and type pip3 install esptool thonny Install Device Drivers The device drivers will help your computer recognize the ESP32 as a USB Device Install Silabs cp210x driver ( windows download ) This step is required if the device is not recognized as a virtual COM port. Flashing the ESP32 Firmware for MicroPython download firmware (I don't recommend v1.18, use the nightly build as it contains several more recent fixes to PWM) open cmd and type thonny open up tools-->options, select the \"interpreter\" tab and ensure that \"Micropython (ESP32)\" is selected. Select the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" down below. Before selecting ok, in the bottom right hand corner select \"install or update firmware\". select the right port corresponding to the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" select the firmware you downloaded, (e.g. \"esp32-20220117-v1.18.bin\") and hit \"install\". wait for the install to finish Look at the interpreter window. You should see: ``` MicroPython v1.18 on 2022-01-17; ESP32 module with ESP32 Type \"help()\" for more information. ``` type print('hello, world!') into the shell and that's it! You should have a working python interpreter loaded on your ESP32! Mac Specific Suggestions: use terminal or xterm if you have it as Macs do not have powershell use pip3 install ... instead of pip install ... with the most recent flavors of MacOS make sure pip or pip3 (Mac) is updated to avoid installation errors bash python3 -m pip install --upgrade pip Mac doesn't do COM, but can list USB devices. In your terminal, type: bash ls -al /dev/tty. then unplug your ESP32 and run the previous command again to see which name for the device is the ESP32 when selecting the port, there may be two Silicon Labs CP210X USB to UART Bridge (ESP device name here) devices. Watch the messages in the terminal to determine the correct selection (obviously, don't use the one that says error/cannot find/etc.) when running the program you may need to press ctrl + c twice within thonny Issues If you install on a computer where you don't have administrative access, it is still possible to install but you have to remember a couple things: After instlling anaconda, you must add it to your path every time you want to run it. Start --> \"cmd\" set PATH=C:\\Users\\<MYUSERNAME>\\Miniconda3;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\mingw-w64\\bin;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\usr\\bin;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\bin;C:\\Users\\daukes\\Miniconda3\\Scripts;%PATH% Replace with your username; confirm the path exists. This step is required every time you load thonny if you installed \"just for me\" or are on an administratively locked pc.","title":"ESP32 Installation and Setup"},{"location":"modules/03-esp32/esp32-installation-and-setup/#install-miniconda-and-packages","text":"You need to use Python on your PC to program the ESP32. install miniconda ( win64 quick link ). Follow this tutorial for detailed instructions. Installing Thonny and other Packages: Open up powershell (win+x, i) and type conda install -c conda-forge wrapt type pip install esptool thonny Note: on Mac, open up terminal or xterm and type pip3 install esptool thonny","title":"Install Miniconda and packages"},{"location":"modules/03-esp32/esp32-installation-and-setup/#install-device-drivers","text":"The device drivers will help your computer recognize the ESP32 as a USB Device Install Silabs cp210x driver ( windows download ) This step is required if the device is not recognized as a virtual COM port.","title":"Install Device Drivers"},{"location":"modules/03-esp32/esp32-installation-and-setup/#flashing-the-esp32-firmware-for-micropython","text":"download firmware (I don't recommend v1.18, use the nightly build as it contains several more recent fixes to PWM) open cmd and type thonny open up tools-->options, select the \"interpreter\" tab and ensure that \"Micropython (ESP32)\" is selected. Select the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" down below. Before selecting ok, in the bottom right hand corner select \"install or update firmware\". select the right port corresponding to the \"Silicon Labs CP210X USB to UART Bridge Com(XY)\" select the firmware you downloaded, (e.g. \"esp32-20220117-v1.18.bin\") and hit \"install\". wait for the install to finish Look at the interpreter window. You should see: ``` MicroPython v1.18 on 2022-01-17; ESP32 module with ESP32 Type \"help()\" for more information. ``` type print('hello, world!') into the shell and that's it! You should have a working python interpreter loaded on your ESP32!","title":"Flashing the ESP32 Firmware for MicroPython"},{"location":"modules/03-esp32/esp32-installation-and-setup/#mac-specific-suggestions","text":"use terminal or xterm if you have it as Macs do not have powershell use pip3 install ... instead of pip install ... with the most recent flavors of MacOS make sure pip or pip3 (Mac) is updated to avoid installation errors bash python3 -m pip install --upgrade pip Mac doesn't do COM, but can list USB devices. In your terminal, type: bash ls -al /dev/tty. then unplug your ESP32 and run the previous command again to see which name for the device is the ESP32 when selecting the port, there may be two Silicon Labs CP210X USB to UART Bridge (ESP device name here) devices. Watch the messages in the terminal to determine the correct selection (obviously, don't use the one that says error/cannot find/etc.) when running the program you may need to press ctrl + c twice within thonny","title":"Mac Specific Suggestions:"},{"location":"modules/03-esp32/esp32-installation-and-setup/#issues","text":"If you install on a computer where you don't have administrative access, it is still possible to install but you have to remember a couple things: After instlling anaconda, you must add it to your path every time you want to run it. Start --> \"cmd\" set PATH=C:\\Users\\<MYUSERNAME>\\Miniconda3;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\mingw-w64\\bin;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\usr\\bin;C:\\Users\\<MYUSERNAME>\\Miniconda3\\Library\\bin;C:\\Users\\daukes\\Miniconda3\\Scripts;%PATH% Replace with your username; confirm the path exists. This step is required every time you load thonny if you installed \"just for me\" or are on an administratively locked pc.","title":"Issues"},{"location":"modules/03-esp32/vscode-setup/","text":"Installation Download from here Installation Options Accept the default installation path keep \"Register Code as an editor for supported file types\" checked keep \"Add to PATH\" checked other options: set to your preference Useful command-line arguments Note: this only works if you added vscode to your system PATH Usage: code [options][paths...] Example: code -n ~/websites/danb0b.github.io/ will open a new folder with that path loaded in the explorer window -a --add <folder> Add folder(s) to the last active window. -n --new-window Force to open a new window. -r --reuse-window Force to open a file or folder in an already opened window. --extensions-dir <dir> Set the root path for extensions. --list-extensions List the installed extensions. --show-versions Show versions of installed extensions, when using --list-extensions. --install-extension <ext-id | path> Installs or updates an extension. --uninstall-extension <ext-id> Uninstalls an extension. --enable-proposed-api <ext-id> Enables proposed API features for --disable-extensions Disable all installed extensions. --disable-extension <ext-id> Disable an extension. --sync <on | off> Turn sync on or off. Shortcuts Key Combination Description ctrl+shift+p opens the command window ctrl+shift+e opens explorer ctrl+shift+x opens extensions ctrl+shift+g opens git ctrl+shift+f opens search ctrl+shift+k remove line ctrl+shift+/ comment line: ctrl+up move line up ctrl+down move line down ctrl+k,v preview ctrl+shift+i format document ctrl+i italicize selection ctrl+b bold selection Extensions from here open powershell and paste the following in: code --install-extension bierner.markdown-yaml-preamble code --install-extension davidanson.vscode-markdownlint code --install-extension ms-python.isort code --install-extension ms-python.python code --install-extension ms-python.vscode-pylance code --install-extension Pycom.pymakr-preview code --install-extension redhat.vscode-yaml code --install-extension shd101wyy.markdown-preview-enhanced code --install-extension yzane.markdown-pdf code --install-extension yzhang.markdown-all-in-one code --list-extensions Markdown all-in-one go to settings @id:editor.defaultFormatter @lang:markdown formatter ctrl_+ shift + I then formats your document pymaker install pymakr preview bash code --install-extension Pycom.pymakr-preview Getting Started (from here ) In File explorer( ctrl+shift+e ) add or create a project folder for holding your micropython code (suggestion: name it \"micropython\"). Consider creating one in your \"code\" git repository. navigate to \"Pymakr: Projects\" tab in the workspace explorer window on the left select \"create project\". Select the same code folder as above and specify a project name (like \"hello-world\"). Select the option to create a subdirectory with the micropython folder. Connect your device via usb to your computer Within the \"hello-world\" project that is created within the \"Pymakr: Projects\" tab, add a new device. Follow the prompts to select the appropriate com port Connect to the device by selecting the lightning bolt icon Open up a terminal window by selecting the box with an arrow in it A terminal window should open and look like this: ```python MicroPython v1.19.1 on 2022-06-18; ESP32 module with ESP32 Type \"help()\" for more information. ``` At the command prompt, type in python print('hello world') which should return python hello world If you wish to disconnect, you can use: Working with the Python interpreter Micropython can either run code from the interpreter (the \"terminal\" as vs code puts it), or by loading a file from its onboard storage. When the ESP32 is reset (using the EN button), it looks for two files, in a specific order: boot.py main.py if there are any loops in these files that prevent execution from ending, you must type ctrl+c to terminate execution from the interpreter window. This will stop any python files from running and bring control back to the interpreter You must always stop execution on the ESP32 before trying to upload files to it. Saving files to/from the ESP32 Within the \"Pymakr: Projects\" workspace there are several other buttons that you can use to sync files to the esp32 Upload project to device: Uploads all your project files to the device Download project from device: Pulls files off the device Open in Explorer: This opens up the ESP32 as a virtual file system in the file explorer and allows you to investigate and work with the file system directly. From the file explorer window, you can also right click and select \"pymakr-->upload to device\" to upload individual files External Resources https://github.com/pycom/pymakr-vsc/blob/HEAD/GET_STARTED.md https://marketplace.visualstudio.com/items?itemName=pycom.Pymakr Other: https://randomnerdtutorials.com/micropython-esp32-esp8266-vs-code-pymakr/ https://lemariva.com/blog/2018/12/micropython-visual-studio-code-as-ide https://lemariva.com/blog/2018/12/micropython-visual-studio-code-as-ide https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/vscode-setup.html https://stackoverflow.com/questions/67647095/how-to-setup-windows-10-vscode-pymakr-for-python-programming-micropython","title":"VS Code Setup and Usage"},{"location":"modules/03-esp32/vscode-setup/#installation","text":"Download from here Installation Options Accept the default installation path keep \"Register Code as an editor for supported file types\" checked keep \"Add to PATH\" checked other options: set to your preference","title":"Installation"},{"location":"modules/03-esp32/vscode-setup/#useful-command-line-arguments","text":"Note: this only works if you added vscode to your system PATH Usage: code [options][paths...] Example: code -n ~/websites/danb0b.github.io/ will open a new folder with that path loaded in the explorer window -a --add <folder> Add folder(s) to the last active window. -n --new-window Force to open a new window. -r --reuse-window Force to open a file or folder in an already opened window. --extensions-dir <dir> Set the root path for extensions. --list-extensions List the installed extensions. --show-versions Show versions of installed extensions, when using --list-extensions. --install-extension <ext-id | path> Installs or updates an extension. --uninstall-extension <ext-id> Uninstalls an extension. --enable-proposed-api <ext-id> Enables proposed API features for --disable-extensions Disable all installed extensions. --disable-extension <ext-id> Disable an extension. --sync <on | off> Turn sync on or off.","title":"Useful command-line arguments"},{"location":"modules/03-esp32/vscode-setup/#shortcuts","text":"Key Combination Description ctrl+shift+p opens the command window ctrl+shift+e opens explorer ctrl+shift+x opens extensions ctrl+shift+g opens git ctrl+shift+f opens search ctrl+shift+k remove line ctrl+shift+/ comment line: ctrl+up move line up ctrl+down move line down ctrl+k,v preview ctrl+shift+i format document ctrl+i italicize selection ctrl+b bold selection","title":"Shortcuts"},{"location":"modules/03-esp32/vscode-setup/#extensions","text":"from here open powershell and paste the following in: code --install-extension bierner.markdown-yaml-preamble code --install-extension davidanson.vscode-markdownlint code --install-extension ms-python.isort code --install-extension ms-python.python code --install-extension ms-python.vscode-pylance code --install-extension Pycom.pymakr-preview code --install-extension redhat.vscode-yaml code --install-extension shd101wyy.markdown-preview-enhanced code --install-extension yzane.markdown-pdf code --install-extension yzhang.markdown-all-in-one code --list-extensions","title":"Extensions"},{"location":"modules/03-esp32/vscode-setup/#markdown-all-in-one","text":"go to settings @id:editor.defaultFormatter @lang:markdown formatter ctrl_+ shift + I then formats your document","title":"Markdown all-in-one"},{"location":"modules/03-esp32/vscode-setup/#pymaker","text":"install pymakr preview bash code --install-extension Pycom.pymakr-preview Getting Started (from here ) In File explorer( ctrl+shift+e ) add or create a project folder for holding your micropython code (suggestion: name it \"micropython\"). Consider creating one in your \"code\" git repository. navigate to \"Pymakr: Projects\" tab in the workspace explorer window on the left select \"create project\". Select the same code folder as above and specify a project name (like \"hello-world\"). Select the option to create a subdirectory with the micropython folder. Connect your device via usb to your computer Within the \"hello-world\" project that is created within the \"Pymakr: Projects\" tab, add a new device. Follow the prompts to select the appropriate com port Connect to the device by selecting the lightning bolt icon Open up a terminal window by selecting the box with an arrow in it A terminal window should open and look like this: ```python MicroPython v1.19.1 on 2022-06-18; ESP32 module with ESP32 Type \"help()\" for more information. ``` At the command prompt, type in python print('hello world') which should return python hello world If you wish to disconnect, you can use:","title":"pymaker"},{"location":"modules/03-esp32/vscode-setup/#working-with-the-python-interpreter","text":"Micropython can either run code from the interpreter (the \"terminal\" as vs code puts it), or by loading a file from its onboard storage. When the ESP32 is reset (using the EN button), it looks for two files, in a specific order: boot.py main.py if there are any loops in these files that prevent execution from ending, you must type ctrl+c to terminate execution from the interpreter window. This will stop any python files from running and bring control back to the interpreter You must always stop execution on the ESP32 before trying to upload files to it.","title":"Working with the Python interpreter"},{"location":"modules/03-esp32/vscode-setup/#saving-files-tofrom-the-esp32","text":"Within the \"Pymakr: Projects\" workspace there are several other buttons that you can use to sync files to the esp32 Upload project to device: Uploads all your project files to the device Download project from device: Pulls files off the device Open in Explorer: This opens up the ESP32 as a virtual file system in the file explorer and allows you to investigate and work with the file system directly. From the file explorer window, you can also right click and select \"pymakr-->upload to device\" to upload individual files","title":"Saving files to/from the ESP32"},{"location":"modules/03-esp32/vscode-setup/#external-resources","text":"https://github.com/pycom/pymakr-vsc/blob/HEAD/GET_STARTED.md https://marketplace.visualstudio.com/items?itemName=pycom.Pymakr Other: https://randomnerdtutorials.com/micropython-esp32-esp8266-vs-code-pymakr/ https://lemariva.com/blog/2018/12/micropython-visual-studio-code-as-ide https://lemariva.com/blog/2018/12/micropython-visual-studio-code-as-ide https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/vscode-setup.html https://stackoverflow.com/questions/67647095/how-to-setup-windows-10-vscode-pymakr-for-python-programming-micropython","title":"External Resources"},{"location":"modules/04-rc-servos/","text":"What is an RC Servo Not just a motor, an \u201cElectromechanical System\u201d What\u2019s inside https://www.sparkfun.com/servos Common Servo Sizes How do you plug in a Servo? Three wires: Ground - usually black Power - usually red Signal - neither red nor black Other Kinds of Servos Linear Servos: Same idea, only you use a lead screw to translate the output rather than rotate Continuous Rotation Servos: The potentiometer is removed, so the control signal just relates to speed Servos with Feedback: Extra wire for position value Servo Mounting Ideas Controlling a Servo PWM: Pulse Width Modulation The \u201cvalue\u201d sent by a PWM signal is the proportion of the time on vs the \u201cperiod\u201d, or time between signals frequency = 1/period period = 200ms frequency = ? Python Code for Controlling a Servo from machine import Pin, PWM from time import sleep frequency = 50 range_low = 28 range_high = 122 servo1 = PWM(Pin(13), frequency) while True: servo1.duty(range_low) sleep(1) servo1.duty(range_high) sleep(1) More Advanced from machine import Pin, PWM from time import sleep frequency = 50 range_low = 28 range_high = 122 servo1 = PWM(Pin(13), frequency) servo2 = PWM(Pin(12), frequency) def angle_to_pwm(degrees): output_range = 122-28 input_range = 180-0 output_pwm = ((degrees/input_range)*output_range)+range_low return int(output_pwm) servo1.duty(angle_to_pwm(90)) while True: for angle in range(0,1800,1): print(angle/10) servo1.duty(angle_to_pwm(angle/10)) sleep(.01) for angle in range(1800,0,-1): print(angle/10) servo1.duty(angle_to_pwm(angle/10)) sleep(.01) Controlling a Sevo with respect to time #import all the libraries from machine import Pin from machine import PWM import time import math # define constants # This is the servo's driving frequency, which equals 20ms (1/f=t). frequency = 50 # This PWM value corresponds to the servo's smallest angle (0) range_low = 28 # This PWM value corresponds to the servo's largest angle (180) range_high = 122 # create a new PWM instance and call it servo1 servo1 = PWM(Pin(13), frequency) def angle_to_pwm(degrees): ''' this function converts a desired angle to its corresponding PWM value, using the range_low and range_high constants defined inline ''' # compute output scaling output_range = range_high-range_low # compute input scaling input_range = 180-0 # divide the desired angle by the input scaling, multiply #by the output scaling, and add the range_low value as an offset. output_pwm = ((degrees/input_range)*output_range)+range_low # return the computed value as an integer return int(output_pwm) # save the initial time in nanoseconds as t0 t0 = time.time_ns() def get_seconds_float(): ''' This function accesses the internal time_ns() function and converts it to a floating point value in seconds ''' # get current time, t in nanoseconds t = time.time_ns() # subtract from t0 to obtain the time since the program began dt = t-t0 # convert to a float firsty, and then convert from nanoseconds # to seconds by multiplying by 10^9 dt = float(dt)/1e9 # return the change in time. return dt def my_signal(t,A,f,b,t0=0): ''' convert the current time to a sinusoidal function with user-defined amplitude(A), frequency(f), DC offset (b), and time-offset(t0). ''' y = A*(math.sin(f*(t-t0)*math.pi*2)) + b return y # here is our main loop while True: # time.sleep is not as necessary...can be commented # out except if you want to print values out. #time.sleep(.01) # get the current time in (floating-point) seconds t = get_seconds_float() # compute the desired angle for servo 1 y1 = my_signal(t,60,.5,90) # print out the desired angle. Not essential, can be commented out print(y1) # set servo 1 pwm value according to the desired angle servo1.duty(angle_to_pwm(y1)) More Information https://www.sparkfun.com/servos","title":"RC Servos"},{"location":"modules/04-rc-servos/#what-is-an-rc-servo","text":"Not just a motor, an \u201cElectromechanical System\u201d","title":"What is an RC Servo"},{"location":"modules/04-rc-servos/#whats-inside","text":"https://www.sparkfun.com/servos","title":"What\u2019s inside"},{"location":"modules/04-rc-servos/#common-servo-sizes","text":"","title":"Common Servo Sizes"},{"location":"modules/04-rc-servos/#how-do-you-plug-in-a-servo","text":"Three wires: Ground - usually black Power - usually red Signal - neither red nor black","title":"How do you plug in a Servo?"},{"location":"modules/04-rc-servos/#other-kinds-of-servos","text":"Linear Servos: Same idea, only you use a lead screw to translate the output rather than rotate Continuous Rotation Servos: The potentiometer is removed, so the control signal just relates to speed Servos with Feedback: Extra wire for position value","title":"Other Kinds of Servos"},{"location":"modules/04-rc-servos/#servo-mounting-ideas","text":"","title":"Servo Mounting Ideas"},{"location":"modules/04-rc-servos/#controlling-a-servo","text":"PWM: Pulse Width Modulation The \u201cvalue\u201d sent by a PWM signal is the proportion of the time on vs the \u201cperiod\u201d, or time between signals frequency = 1/period period = 200ms frequency = ?","title":"Controlling a Servo"},{"location":"modules/04-rc-servos/#python-code-for-controlling-a-servo","text":"from machine import Pin, PWM from time import sleep frequency = 50 range_low = 28 range_high = 122 servo1 = PWM(Pin(13), frequency) while True: servo1.duty(range_low) sleep(1) servo1.duty(range_high) sleep(1)","title":"Python Code for Controlling a Servo"},{"location":"modules/04-rc-servos/#more-advanced","text":"from machine import Pin, PWM from time import sleep frequency = 50 range_low = 28 range_high = 122 servo1 = PWM(Pin(13), frequency) servo2 = PWM(Pin(12), frequency) def angle_to_pwm(degrees): output_range = 122-28 input_range = 180-0 output_pwm = ((degrees/input_range)*output_range)+range_low return int(output_pwm) servo1.duty(angle_to_pwm(90)) while True: for angle in range(0,1800,1): print(angle/10) servo1.duty(angle_to_pwm(angle/10)) sleep(.01) for angle in range(1800,0,-1): print(angle/10) servo1.duty(angle_to_pwm(angle/10)) sleep(.01)","title":"More Advanced"},{"location":"modules/04-rc-servos/#controlling-a-sevo-with-respect-to-time","text":"#import all the libraries from machine import Pin from machine import PWM import time import math # define constants # This is the servo's driving frequency, which equals 20ms (1/f=t). frequency = 50 # This PWM value corresponds to the servo's smallest angle (0) range_low = 28 # This PWM value corresponds to the servo's largest angle (180) range_high = 122 # create a new PWM instance and call it servo1 servo1 = PWM(Pin(13), frequency) def angle_to_pwm(degrees): ''' this function converts a desired angle to its corresponding PWM value, using the range_low and range_high constants defined inline ''' # compute output scaling output_range = range_high-range_low # compute input scaling input_range = 180-0 # divide the desired angle by the input scaling, multiply #by the output scaling, and add the range_low value as an offset. output_pwm = ((degrees/input_range)*output_range)+range_low # return the computed value as an integer return int(output_pwm) # save the initial time in nanoseconds as t0 t0 = time.time_ns() def get_seconds_float(): ''' This function accesses the internal time_ns() function and converts it to a floating point value in seconds ''' # get current time, t in nanoseconds t = time.time_ns() # subtract from t0 to obtain the time since the program began dt = t-t0 # convert to a float firsty, and then convert from nanoseconds # to seconds by multiplying by 10^9 dt = float(dt)/1e9 # return the change in time. return dt def my_signal(t,A,f,b,t0=0): ''' convert the current time to a sinusoidal function with user-defined amplitude(A), frequency(f), DC offset (b), and time-offset(t0). ''' y = A*(math.sin(f*(t-t0)*math.pi*2)) + b return y # here is our main loop while True: # time.sleep is not as necessary...can be commented # out except if you want to print values out. #time.sleep(.01) # get the current time in (floating-point) seconds t = get_seconds_float() # compute the desired angle for servo 1 y1 = my_signal(t,60,.5,90) # print out the desired angle. Not essential, can be commented out print(y1) # set servo 1 pwm value according to the desired angle servo1.duty(angle_to_pwm(y1))","title":"Controlling a Sevo with respect to time"},{"location":"modules/04-rc-servos/#more-information","text":"https://www.sparkfun.com/servos","title":"More Information"},{"location":"modules/05-gaits-and-functions/","text":"What is a \"Gait\" Gaits Gaits file file {height=\"5in\"} Graphs {height=\"5in\"} {height=\"5in\"} {height=\"5in\"} {height=\"5in\"} {height=\"5in\"} {height=\"5in\"} Muscles {height=\"5in\"} {height=\"5in\"} Sinusoids Wavelength, Frequency Functions def myfunction(variable1,variable2): internal_variable = variable1+variable2 return internal_variable Math import math a = math.sin() Code #import all the libraries # from machine import Pin # from machine import PWM import math import time from machine import Pin from machine import PWM # define constants # This is the servo's driving frequency, which equals 20ms (1/f=t). servo_frequency = 50 # This PWM value corresponds to the servo's smallest angle (0) range_low = 28 # This PWM value corresponds to the servo's largest angle (180) range_high = 122 # save the initial time in nanoseconds as t0 t0 = time.time_ns() def angle_to_pwm(degrees): ''' this function converts a desired angle to its corresponding PWM value, using the range_low and range_high constants defined inline ''' # compute output scaling output_range = range_high-range_low # compute input scaling input_range = 180-0 # divide the desired angle by the input scaling, multiply #by the output scaling, and add the range_low value as an offset. output_pwm = ((degrees/input_range)*output_range)+range_low if output_pwm < range_low: output_pwm = range_low if output_pwm > range_high: output_pwm = range_high # return the computed value as an integer return int(output_pwm) def get_seconds_float(): ''' This function accesses the internal time_ns() function and converts it to a floating point value in seconds ''' # get current time, t in nanoseconds t = time.time_ns() # subtract from t0 to obtain the time since the program began dt = t-t0 # convert to a float firsty, and then convert from nanoseconds # to seconds by multiplying by 10^9 dt = float(dt)/1e9 # return the change in time. return dt f = .5 A = 90 b = 90 l1 = 0 l2 = .25 l3 = .5 l4 = .75 # create a new PWM instance and call it servo1 servo1 = PWM(Pin(13), servo_frequency) servo2 = PWM(Pin(12), servo_frequency) servo3 = PWM(Pin(14), servo_frequency) servo4 = PWM(Pin(27), servo_frequency) # here is our main loop while True: # time.sleep is not as necessary...can be commented # out except if you want to print values out. #time.sleep(.01) # get the current time in (floating-point) seconds t = get_seconds_float() # compute the desired angle for servo 1 y1 = A*(math.sin((2*(f*t-l1))*math.pi)) + b y2 = A*(math.sin((2*(f*t-l2))*math.pi)) + b y3 = A*(math.sin((2*(f*t-l3))*math.pi)) + b y4 = A*(math.sin((2*(f*t-l4))*math.pi)) + b # print out the desired angle. Not essential, can be commented out print(y1) # set servo 1 pwm value according to the desired angle servo1.duty(angle_to_pwm(y1)) servo2.duty(angle_to_pwm(y2)) servo3.duty(angle_to_pwm(y3)) servo4.duty(angle_to_pwm(y4))","title":"Gaits and Functions"},{"location":"modules/05-gaits-and-functions/#what-is-a-gait","text":"","title":"What is a \"Gait\""},{"location":"modules/05-gaits-and-functions/#gaits","text":"","title":"Gaits"},{"location":"modules/05-gaits-and-functions/#gaits_1","text":"","title":"Gaits"},{"location":"modules/05-gaits-and-functions/#_1","text":"","title":""},{"location":"modules/05-gaits-and-functions/#_2","text":"file","title":""},{"location":"modules/05-gaits-and-functions/#_3","text":"file","title":""},{"location":"modules/05-gaits-and-functions/#_4","text":"{height=\"5in\"}","title":""},{"location":"modules/05-gaits-and-functions/#graphs","text":"","title":"Graphs"},{"location":"modules/05-gaits-and-functions/#_5","text":"{height=\"5in\"} {height=\"5in\"}","title":""},{"location":"modules/05-gaits-and-functions/#_6","text":"{height=\"5in\"}","title":""},{"location":"modules/05-gaits-and-functions/#_7","text":"{height=\"5in\"}","title":""},{"location":"modules/05-gaits-and-functions/#_8","text":"{height=\"5in\"}","title":""},{"location":"modules/05-gaits-and-functions/#_9","text":"{height=\"5in\"}","title":""},{"location":"modules/05-gaits-and-functions/#muscles","text":"{height=\"5in\"}","title":"Muscles"},{"location":"modules/05-gaits-and-functions/#_10","text":"{height=\"5in\"}","title":""},{"location":"modules/05-gaits-and-functions/#sinusoids","text":"","title":"Sinusoids"},{"location":"modules/05-gaits-and-functions/#wavelength-frequency","text":"","title":"Wavelength, Frequency"},{"location":"modules/05-gaits-and-functions/#functions","text":"def myfunction(variable1,variable2): internal_variable = variable1+variable2 return internal_variable","title":"Functions"},{"location":"modules/05-gaits-and-functions/#math","text":"import math a = math.sin()","title":"Math"},{"location":"modules/05-gaits-and-functions/#code","text":"#import all the libraries # from machine import Pin # from machine import PWM import math import time from machine import Pin from machine import PWM # define constants # This is the servo's driving frequency, which equals 20ms (1/f=t). servo_frequency = 50 # This PWM value corresponds to the servo's smallest angle (0) range_low = 28 # This PWM value corresponds to the servo's largest angle (180) range_high = 122 # save the initial time in nanoseconds as t0 t0 = time.time_ns() def angle_to_pwm(degrees): ''' this function converts a desired angle to its corresponding PWM value, using the range_low and range_high constants defined inline ''' # compute output scaling output_range = range_high-range_low # compute input scaling input_range = 180-0 # divide the desired angle by the input scaling, multiply #by the output scaling, and add the range_low value as an offset. output_pwm = ((degrees/input_range)*output_range)+range_low if output_pwm < range_low: output_pwm = range_low if output_pwm > range_high: output_pwm = range_high # return the computed value as an integer return int(output_pwm) def get_seconds_float(): ''' This function accesses the internal time_ns() function and converts it to a floating point value in seconds ''' # get current time, t in nanoseconds t = time.time_ns() # subtract from t0 to obtain the time since the program began dt = t-t0 # convert to a float firsty, and then convert from nanoseconds # to seconds by multiplying by 10^9 dt = float(dt)/1e9 # return the change in time. return dt f = .5 A = 90 b = 90 l1 = 0 l2 = .25 l3 = .5 l4 = .75 # create a new PWM instance and call it servo1 servo1 = PWM(Pin(13), servo_frequency) servo2 = PWM(Pin(12), servo_frequency) servo3 = PWM(Pin(14), servo_frequency) servo4 = PWM(Pin(27), servo_frequency) # here is our main loop while True: # time.sleep is not as necessary...can be commented # out except if you want to print values out. #time.sleep(.01) # get the current time in (floating-point) seconds t = get_seconds_float() # compute the desired angle for servo 1 y1 = A*(math.sin((2*(f*t-l1))*math.pi)) + b y2 = A*(math.sin((2*(f*t-l2))*math.pi)) + b y3 = A*(math.sin((2*(f*t-l3))*math.pi)) + b y4 = A*(math.sin((2*(f*t-l4))*math.pi)) + b # print out the desired angle. Not essential, can be commented out print(y1) # set servo 1 pwm value according to the desired angle servo1.duty(angle_to_pwm(y1)) servo2.duty(angle_to_pwm(y2)) servo3.duty(angle_to_pwm(y3)) servo4.duty(angle_to_pwm(y4))","title":"Code"},{"location":"modules/06-introduction-to-parts/","text":"PART TYPES Parts usually come in a couple of main package types. The most common are through-hole and surface mount Of course, there are many more classifications for different sizes, shapes, etc. Through-hole parts are used mainly for prototyping on breadboards Surface-mount parts are usually for \u2018final products\u2019 Through-Hole Surface Mount Flat SCHEMATICS How engineers explain electrical designs quickly Architect : blueprint as engineer : schematic Each symbol represents a part! CONCEPTS Direct current (DC)- electricity flows one-way and at one level Alternating current (AC)- electrical current that changes magnitude and flows back and forth (very quickly) Circuits use/require voltage, current, and resistance Voltage- the push of charged electrons through a circuit Current- the flow of the electrons Resistance- the opposition to the flow of electrons CAPACITORS Job: Stores up electric energy in electric field using two close (but not touching) plates Notes: There are different types- ceramic, polar, surface mount Used In: Wall / laptop chargers Symbol: DIODES Job: Makes current flow in one direction. Notes: Like a one-way switch Used In: Switches, oscillators, etc. Symbol: INDUCTORS Job: Stores energy in magnetic field by running a current through a looped wire Notes: The number of loops, how tight the loops are bound, etc. can affect the inductance Used In: Filtering signals, energy storage Symbol: LEDs Job: Emits light we can see when current passes through Notes: They are pretty :) Used In: Pretty much anything that lights up Symbol: MICROCONTROLLERS Job: Control the functions of a system Notes: Basically a small computer Used In: Anything that requires higher function Symbol: OLEDs, LCD Job: Uses either current or backlight /reflector to light up certain parts and display characters Notes: Organic Light Emitting Diode; Liquid Crystal Display Used In: TV screens, video game screens, etc. Symbol: RESISTORS Job: Electrically resists the current in a circuit. Notes: Keeps circuits from overloading Used In: EVERYTHING Symbol: SEMICONDUCTORS Material type that is in between a conductor (like copper) and an insulator (like glass) Conducts electricity better with certain conditions, like temperature Temperature increases > resistivity decreases Usually made of elements like Si (silicon) or Ge (germanium) TRANSFORMERS Job: Transfers electrical energy from one circuit to another Notes: Can change the voltages of AC, doesn\u2019t work on DC Used In: Power grid- how you get power to your house! Symbol: TRANSISTORS Job: Switches or amplifies electrical signals/power. Notes: Semiconductor device! Many different types. Used In: Computer memory, smartphones Symbol: VOLTAGE REGULATORS Job: Make stable voltages; step up/down voltages Notes: Two main types- linear and switching Used In: AC/DC, DC/DC, AC/AC power conversion Symbol: HELPFUL SITES & RESOURCES Multisim: Online Circuit Simulator (schematic-heavy) https://www.multisim.com/ TinkerCAD: Model a circuit (part-heavy) https://www.tinkercad.com/circuits DigiKey: Resistor color code calculator https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code","title":"Introduction to Parts"},{"location":"modules/06-introduction-to-parts/#part-types","text":"Parts usually come in a couple of main package types. The most common are through-hole and surface mount Of course, there are many more classifications for different sizes, shapes, etc. Through-hole parts are used mainly for prototyping on breadboards Surface-mount parts are usually for \u2018final products\u2019 Through-Hole Surface Mount Flat","title":"PART TYPES"},{"location":"modules/06-introduction-to-parts/#schematics","text":"How engineers explain electrical designs quickly Architect : blueprint as engineer : schematic Each symbol represents a part!","title":"SCHEMATICS"},{"location":"modules/06-introduction-to-parts/#concepts","text":"Direct current (DC)- electricity flows one-way and at one level Alternating current (AC)- electrical current that changes magnitude and flows back and forth (very quickly) Circuits use/require voltage, current, and resistance Voltage- the push of charged electrons through a circuit Current- the flow of the electrons Resistance- the opposition to the flow of electrons","title":"CONCEPTS"},{"location":"modules/06-introduction-to-parts/#capacitors","text":"Job: Stores up electric energy in electric field using two close (but not touching) plates Notes: There are different types- ceramic, polar, surface mount Used In: Wall / laptop chargers Symbol:","title":"CAPACITORS"},{"location":"modules/06-introduction-to-parts/#diodes","text":"Job: Makes current flow in one direction. Notes: Like a one-way switch Used In: Switches, oscillators, etc. Symbol:","title":"DIODES"},{"location":"modules/06-introduction-to-parts/#inductors","text":"Job: Stores energy in magnetic field by running a current through a looped wire Notes: The number of loops, how tight the loops are bound, etc. can affect the inductance Used In: Filtering signals, energy storage Symbol:","title":"INDUCTORS"},{"location":"modules/06-introduction-to-parts/#leds","text":"Job: Emits light we can see when current passes through Notes: They are pretty :) Used In: Pretty much anything that lights up Symbol:","title":"LEDs"},{"location":"modules/06-introduction-to-parts/#microcontrollers","text":"Job: Control the functions of a system Notes: Basically a small computer Used In: Anything that requires higher function Symbol:","title":"MICROCONTROLLERS"},{"location":"modules/06-introduction-to-parts/#oleds-lcd","text":"Job: Uses either current or backlight /reflector to light up certain parts and display characters Notes: Organic Light Emitting Diode; Liquid Crystal Display Used In: TV screens, video game screens, etc. Symbol:","title":"OLEDs, LCD"},{"location":"modules/06-introduction-to-parts/#resistors","text":"Job: Electrically resists the current in a circuit. Notes: Keeps circuits from overloading Used In: EVERYTHING Symbol:","title":"RESISTORS"},{"location":"modules/06-introduction-to-parts/#semiconductors","text":"Material type that is in between a conductor (like copper) and an insulator (like glass) Conducts electricity better with certain conditions, like temperature Temperature increases > resistivity decreases Usually made of elements like Si (silicon) or Ge (germanium)","title":"SEMICONDUCTORS"},{"location":"modules/06-introduction-to-parts/#transformers","text":"Job: Transfers electrical energy from one circuit to another Notes: Can change the voltages of AC, doesn\u2019t work on DC Used In: Power grid- how you get power to your house! Symbol:","title":"TRANSFORMERS"},{"location":"modules/06-introduction-to-parts/#transistors","text":"Job: Switches or amplifies electrical signals/power. Notes: Semiconductor device! Many different types. Used In: Computer memory, smartphones Symbol:","title":"TRANSISTORS"},{"location":"modules/06-introduction-to-parts/#voltage-regulators","text":"Job: Make stable voltages; step up/down voltages Notes: Two main types- linear and switching Used In: AC/DC, DC/DC, AC/AC power conversion Symbol:","title":"VOLTAGE REGULATORS"},{"location":"modules/06-introduction-to-parts/#helpful-sites-resources","text":"Multisim: Online Circuit Simulator (schematic-heavy) https://www.multisim.com/ TinkerCAD: Model a circuit (part-heavy) https://www.tinkercad.com/circuits DigiKey: Resistor color code calculator https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code","title":"HELPFUL SITES &amp; RESOURCES"},{"location":"modules/07-sensors/","text":"What are sensors? A sensor is a device used to measure physical properties of an object or system. Common physical properties: Light Pressure/Force Motion Heat Humidity/Moisture Color Position/Velocity Acceleration Strain What is the purpose of using sensors? Industrial use Monitor systems Control processes Safety measures * * Medical use Diagnose patients Monitor vitals * * How do sensors work? Let\u2019s start by understanding a circuit Example of a circuit: How do sensors work continued\u2026 Example of a pressure sensor: The pressure is converted into a standard electrical signal by the sensor. Light Lots of different mechanisms for light Photoresistor Photodiode Photovoltaic +light \u2013> +V Photoconductor +light \u2013> -R Phototransistor +light Magnetic Field * * Types * Reed Switch * Inductive - Galvonometer * Hall Effect Sensor \u2013 go linear. * http://howtomechatronics.com/how-it-works/electrical-engineering/hall-effect-hall-effect-sensors-work/ http://www.brown.edu/Departments/Engineering/Courses/En123/CirRevFiles/Inductance2.htm Motion Accelerometer accelerations Gyro Angular accelerations IMU Everything Smoothing Integration Position, Velocity, Acceleration Rotation, rotational velocity, angular acceleration Position - Resistive * * Temperature-dependence * Hysterisis * Types * Linear Potentiometer * Rotary Potentiometer * Flex Sensor * etc Position - Capacitive Position - Other Theory Emitter/Detector Pair Proximity Based on reflectance Ultrasonic High Noise Longer distances http://maxembedded.com/2013/08/how-to-build-an-ir-sensor/ Pressure / Force * * Strain Gauge * Temperature-sensitive * Wheatstone Bridge * Load Cell * Other Position Sensors Dynamic Tactile Sensing Piezoelectric Sensor Position - Induction * * Non-contacting * Requires AC * Senses Metals, esp Ferrous Metals * Types: * Inductive Proximity Switch, Position Sensors * LVDT * Inductive Encoders * https://sensortech.wordpress.com/2014/03/05/basic-operating-principle-of-an-inductive-proximity-sensor/ * http://sensorwiki.org/doku.php/sensors/linear_variable_differential_transformer Temperature * * RTD: Resistance temperature detector * Thermistor * Thermocouple Encoders Types Optical Absolute Relative Magnetic Capacitive Inductive Embedding Sensors Common Circuits http://hades.mech.northwestern.edu/index.php/Photodiodes_and_Phototransistors Circuit Conditioning Self-contained packages Op Amps Transistor-based amplification","title":"An Introduction to Sensors"},{"location":"modules/07-sensors/#what-are-sensors","text":"A sensor is a device used to measure physical properties of an object or system. Common physical properties: Light Pressure/Force Motion Heat Humidity/Moisture Color Position/Velocity Acceleration Strain","title":"What are sensors?"},{"location":"modules/07-sensors/#what-is-the-purpose-of-using-sensors","text":"Industrial use Monitor systems Control processes Safety measures * * Medical use Diagnose patients Monitor vitals * *","title":"What is the purpose of using sensors?"},{"location":"modules/07-sensors/#how-do-sensors-work-lets-start-by-understanding-a-circuit","text":"Example of a circuit:","title":"How do sensors work? Let\u2019s start by understanding a circuit"},{"location":"modules/07-sensors/#how-do-sensors-work-continued","text":"Example of a pressure sensor: The pressure is converted into a standard electrical signal by the sensor.","title":"How do sensors work continued\u2026"},{"location":"modules/07-sensors/#light","text":"Lots of different mechanisms for light Photoresistor Photodiode Photovoltaic +light \u2013> +V Photoconductor +light \u2013> -R Phototransistor +light","title":"Light"},{"location":"modules/07-sensors/#magnetic-field","text":"","title":"Magnetic Field"},{"location":"modules/07-sensors/#_1","text":"","title":""},{"location":"modules/07-sensors/#_2","text":"* * Types * Reed Switch * Inductive - Galvonometer * Hall Effect Sensor \u2013 go linear. * http://howtomechatronics.com/how-it-works/electrical-engineering/hall-effect-hall-effect-sensors-work/ http://www.brown.edu/Departments/Engineering/Courses/En123/CirRevFiles/Inductance2.htm","title":""},{"location":"modules/07-sensors/#motion","text":"Accelerometer accelerations Gyro Angular accelerations IMU Everything Smoothing Integration Position, Velocity, Acceleration Rotation, rotational velocity, angular acceleration","title":"Motion"},{"location":"modules/07-sensors/#position-resistive","text":"","title":"Position - Resistive"},{"location":"modules/07-sensors/#_3","text":"* * Temperature-dependence * Hysterisis * Types * Linear Potentiometer * Rotary Potentiometer * Flex Sensor * etc","title":""},{"location":"modules/07-sensors/#position-capacitive","text":"","title":"Position - Capacitive"},{"location":"modules/07-sensors/#_4","text":"","title":""},{"location":"modules/07-sensors/#position-other","text":"Theory","title":"Position - Other"},{"location":"modules/07-sensors/#_5","text":"Emitter/Detector Pair Proximity Based on reflectance Ultrasonic High Noise Longer distances","title":""},{"location":"modules/07-sensors/#_6","text":"http://maxembedded.com/2013/08/how-to-build-an-ir-sensor/","title":""},{"location":"modules/07-sensors/#pressure-force","text":"","title":"Pressure / Force"},{"location":"modules/07-sensors/#_7","text":"* * Strain Gauge * Temperature-sensitive * Wheatstone Bridge * Load Cell * Other Position Sensors","title":""},{"location":"modules/07-sensors/#dynamic-tactile-sensing","text":"","title":"Dynamic Tactile Sensing"},{"location":"modules/07-sensors/#_8","text":"Piezoelectric Sensor","title":""},{"location":"modules/07-sensors/#position-induction","text":"","title":"Position - Induction"},{"location":"modules/07-sensors/#_9","text":"* * Non-contacting * Requires AC * Senses Metals, esp Ferrous Metals * Types: * Inductive Proximity Switch, Position Sensors * LVDT * Inductive Encoders * https://sensortech.wordpress.com/2014/03/05/basic-operating-principle-of-an-inductive-proximity-sensor/ * http://sensorwiki.org/doku.php/sensors/linear_variable_differential_transformer","title":""},{"location":"modules/07-sensors/#temperature","text":"","title":"Temperature"},{"location":"modules/07-sensors/#_10","text":"* * RTD: Resistance temperature detector * Thermistor * Thermocouple","title":""},{"location":"modules/07-sensors/#encoders","text":"Types Optical Absolute Relative Magnetic Capacitive Inductive","title":"Encoders"},{"location":"modules/07-sensors/#embedding-sensors","text":"","title":"Embedding Sensors"},{"location":"modules/07-sensors/#_11","text":"","title":""},{"location":"modules/07-sensors/#_12","text":"","title":""},{"location":"modules/07-sensors/#_13","text":"","title":""},{"location":"modules/07-sensors/#_14","text":"","title":""},{"location":"modules/07-sensors/#_15","text":"","title":""},{"location":"modules/07-sensors/#common-circuits","text":"","title":"Common Circuits"},{"location":"modules/07-sensors/#_16","text":"http://hades.mech.northwestern.edu/index.php/Photodiodes_and_Phototransistors","title":""},{"location":"modules/07-sensors/#_17","text":"","title":""},{"location":"modules/07-sensors/#_18","text":"","title":""},{"location":"modules/07-sensors/#_19","text":"","title":""},{"location":"modules/07-sensors/#circuit-conditioning","text":"Self-contained packages Op Amps Transistor-based amplification","title":"Circuit Conditioning"}]}